

      C  R  I  P  T  O  G  R  A  M  A
      _______________________________________________________________

      Número 17
      15 de Septiembre de 1999
     ________________________________________________________________     


      SUMARIO: 

        Código abierto y seguridad 
        ¿Clave de la NSA en Microsoft Crypto API? 
        Counterpane Systems: Investigación documentada 
        Noticias 
        Noticias extremadamente preocupantes 
        Noticias desde Counterpane 
        En la ratonera: E*Trade 
        Factorizar un número de 512 bit 
        Comentarios de los lectores 

      _______________________________________________________________


        1. CÓDIGO ABIERTO Y SEGURIDAD
        _____________________________

        Por Bruce Schneier
        Traducción: Angel Galindo Sánchez


        Como criptógrafo y experto en seguridad informática, nunca he 
        comprendido el alboroto actual sobre el movimiento de software de código 
        abierto. En el mundo de la criptografía se considera que el código 
        abierto es necesario para tener un buen nivel de seguridad; y se ha 
        considerado así durante décadas. La seguridad pública es siempre más 
        segura que la seguridad privada. Esto es cierto para los algoritmos 
        criptográficos, para los protocolos de seguridad y para el código fuente 
        de seguridad. Para nosotros, el código abierto no es sólo un modelo de 
        negocio, sino una práctica de ingeniería adecuada.

        * Criptografía de código abierto 

        La criptografía ha adoptado los ideales del código abierto durante 
        décadas, aunque lo llamemos "utilizar algoritmos y protocolos públicos". 
        La idea es simple: la criptografía es difícil de hacer correctamente, y 
        la única forma de saber si algo está bien hecho es ser capaz de 
        comprobarlo.

        Esto es vital en criptografía, porque la criptografía no tiene nada que 
        ver con la funcionalidad. Puedes tener dos algoritmos, uno seguro y el 
        otro inseguro, y ambos pueden funcionar perfectamente. Ambos pueden 
        cifrar y descifrar, son eficientes, tienen un bonito interfaz de usuario 
        y nunca se cuelgan. La única forma de distinguir la buena de la mala 
        criptografía es examinándola.

        Aún peor, no se consigue nada teniendo un montón de gente cualquiera 
        examinando el código; la única forma de distinguir la buena criptografía 
        de la mala es examinándola por expertos. Analizar criptografía es duro, 
        y hay pocas personas en el mundo que puedan hacerlo de forma competente. 
        Antes de que un algoritmo pueda considerarse realmente seguro, necesita 
        ser examinado por muchos expertos a lo largo de muchos años.

        Este es un fuerte argumento en favor de los algoritmos de código 
        abierto. Dado que la única forma de tener confianza en un algoritmo es 
        tener expertos que lo examinen, y la única forma en que ellos emplearán 
        el tiempo necesario para examinarlo adecuadamente es permitirles que 
        publiquen documentos técnicos de investigación sobre él, el algoritmo 
        debe ser público. Un algoritmo privado, no importa quién lo haya 
        diseñado o a quién se haya pagado para examinarlo, es mucho más 
        arriesgado que un algoritmo público.

        El contra-argumento que a veces se oye es que la criptografía secreta es 
        más fuerte porque es secreta, y que los algoritmos públicos son más 
        arriesgados porque son públicos. Esto suena bastante lógico, hasta que 
        te paras a pensar un momento sobre ello. Los algoritmos públicos están 
        diseñados para ser seguros incluso aunque sean públicos; así es como 
        están hechos. Por tanto, no hay ningún riesgo en hacerlos públicos. Si 
        un algoritmo sólo es seguro si permanece secreto, solamente lo será 
        hasta que alguien utilice ingeniería inversa contra él y lo publique. 
        Una gran variedad de algoritmos secretos para telefonía móvil digital 
        han sido hechos públicos y rotos rápidamente, ilustrando la futilidad de 
        este argumento.

        En lugar de utilizar algoritmos públicos, las compañías norteamericanas 
        de telefonía móvil decidieron crear su propia criptografía privada. 
        Durante los últimos años, diferentes algoritmos de estos se han hecho 
        públicos. (No, las compañías telefónicas no querían que se hicieran 
        públicos; lo que generalmente ocurre es que algún criptógrafo recibe sus 
        especificaciones en un paquete anónimo). Una vez que se ha hecho 
        público, ya está roto. Ahora la industria de telefonía móvil americana 
        está considerando el utilizar algoritmos públicos para reemplazar a sus 
        rotos algoritmos privados.

        Por otro lado, el popular programa de encriptación de correo electrónico 
        PGP siempre ha utilizado algoritmos públicos. Y ninguno de esos 
        algoritmos ha sido roto jamás. Esto mismo puede decirse de otros 
        protocolos de Internet: SSL, S/MIME, IPSec, SSH, etcétera. 

        * La mejor evaluación no se compra con dinero 

        Actualmente el gobierno norteamericano está eligiendo un algoritmo de 
        encriptación para sustituir a DES, llamado AES (Advanced Encryption 
        Standard, Norma de Cifrado Avanzada). Hay cinco candidatos a la norma, 
        y, antes de elegir el definitivo, los mejores criptógrafos del mundo 
        pasarán horas evaluándolos. Ninguna empresa, no importa lo rica que sea, 
        puede permitirse este tipo de evaluación. Y dado que AES es gratuito 
        para cualquier utilización, no hay ninguna razón para que otra empresa 
        ni siquiera se plantee crear su propio algoritmo. La criptografía 
        abierta no es sólo la mejor, sino que además es la más barata.

        El mismo razonamiento que lleva a las empresas inteligentes a utilizar 
        criptografía pública también les lleva a utilizar protocolos de 
        seguridad públicos: cualquiera que cree su propio protocolo de 
        seguridad, es un genio o un loco. Dado que hay más de los últimos que de 
        los primeros, utilizar protocolos públicos es más inteligente.

        Consideremos IPSec, el protocolo de seguridad de Internet. A principios 
        de 1992, fue diseñado abiertamente por un comité y fue objeto de 
        numerosos escrutinios públicos desde sus inicios. Todo el mundo sabía 
        que era un protocolo importante y la gente puso mucho esfuerzo tratando 
        de hacer las cosas bien. Diferentes tecnologías de seguridad fueron 
        propuestas, rotas y después modificadas. Se codificaron y analizaron 
        varias versiones. El primer boceto de la norma se publicó en 1995. Se 
        debatieron diferentes aspectos de IPSec, como sus méritos en seguridad, 
        comportamiento, facilidad de implementación, capacidad de ampliación y 
        uso.

        En noviembre de 1998, el comité publicó una serie de documentos - el 
        primer paso de todo un proceso para hacer de IPSec un estándar en 
        Internet. Y todavía sigue estudiándose. Los criptógrafos del Laboratorio 
        de Investigación Naval recientemente descubrieron un pequeño error de 
        implementación. El trabajo continúa, en público, para y por cualquiera 
        que esté interesado. El resultado, basado en años de análisis público, 
        es un protocolo fuerte en el que confía la mayoría de la gente.
        Por otro lado, Microsoft desarrolló su propio protocolo PPTP para hacer 
        lo mismo. Inventaron su propio protocolo de autenticación, su propia 
        función hash, y su propio algoritmo de generación de llaves. Todas y 
        cada una de estas implementaciones resultaron ser defectuosas. 

        Utilizaron su propio algoritmo de cifrado, pero lo utilizaron de una 
        manera que impedía su propia seguridad. Tuvieron errores de 
        implementación que debilitaron todo el sistema aún más. Pero como 
        hicieron todo este trabajo internamente, nadie sabía que PPTP era débil.
        Microsoft instaló PPTP en Windows NT y Windows 95, y lo utilizaron en 
        los productos de su red privada virtual (VPN). A veces publicaron sus 
        protocolos y, en el verano de 1998, la compañía para la que trabajo, 
        Counterpane Systems, publicó un documento técnico describiendo los 
        errores que encontramos. Una vez más, el escrutinio público mostró su 
        valor. Microsoft rápidamente sacó una serie de parches que evaluamos ese 
        verano y vimos que eran buenas mejoras, pero aún encontramos fallos.
        Como en los algoritmos, la única forma de distinguir un protocolo de 
        seguridad bueno de uno que está roto, es tener expertos que lo examinen. 
        Por tanto, si necesita utilizar un protocolo de seguridad, será mucho 
        más inteligente utilizar uno que ya haya sido evaluado. Puede crearse el 
        suyo propio, pero, ¿cuáles son la probabilidades de que sea tan seguro 
        como otro que ya ha sido probado por expertos en los últimos años?.

        * Asegurando su código 

        Exactamente el mismo razonamiento lleva a cualquier ingeniero de 
        seguridad inteligente a demandar código abierto para cualquier aspecto 
        relacionado con la seguridad. Repasemos: la seguridad no tiene nada que 
        ver con la funcionalidad. Por tanto, ningún nivel de pruebas de 
        versiones beta podrá nunca descubrir un fallo de seguridad. La única 
        forma de encontrar fallos de seguridad en un segmento de código -como un 
        algoritmo criptográfico o un protocolo de seguridad- es evaluarlo. Esto 
        es cierto para cualquier código, tanto si es abierto como privado. Y no 
        puedes hacer que cualquiera te evalúe el código, sino que necesitas que 
        lo hagan expertos en software de seguridad. Necesitas que lo evalúen 
        varias veces y desde diferentes perspectivas, durante el transcurso de 
        varios años. Se puede conseguir contratar a esta clase de expertos, pero 
        es mucho más barato y efectivo dejar que toda una comunidad lo haga. Y 
        la mejor forma de conseguirlo es hacer público el código.

        Pero si quieres que tu código sea realmente seguro, necesitará hacer 
        algo más que simplemente publicarlo bajo una licencia de código público. 
        Hay dos cuestiones que deberá tener siempre presentes.

        Primero, la simple publicación del código no significa que la gente lo 
        examinará para buscar sus fallos. Los investigadores de seguridad son 
        personas inconstantes y ocupadas. No tienen tiempo de examinar todas las 
        muestras de código que se publican. Por tanto, aunque hacer público el 
        código es bueno, no es una garantía de seguridad. Podría nombrar una 
        docena de librerías de seguridad de código abierto de las que nunca 
        nadie ha oído hablar jamás o que nunca han sido evaluadas. Por contra, 
        el código de seguridad de Linux ha sido comprobado por un montón de 
        excelentes ingenieros de seguridad.

        Segundo, necesita asegurarse de que los fallos de seguridad sean 
        corregidos tan pronto como se hagan públicos. La gente encontrará 
        errores en el código. Esto es bueno. No hay razón para pensar que el 
        código abierto, en el momento de escribirlo, es más seguro que el código 
        privado. El objetivo de hacer que sea abierto es conseguir que mucha, 
        mucha gente analice el código buscando sus fallos, y los encuentre. 
        Rápido. Hay que corregir los errores encontrados. Un código público con 
        dos años de antigüedad tendrá muchos menos fallos de seguridad que un 
        código privado, simplemente porque ya se habrán encontrado y corregido 
        muchos. Los fallos de seguridad también se descubrirán en códigos 
        privados, pero a un ritmo mucho menor.

        Comparar la seguridad de Linux con la de Microsoft Windows no es muy 
        instructivo. Microsoft ha hecho un trabajo tan malo con la seguridad que 
        no es en realidad una comparación justa. Pero comparar Linux con 
        Solaris, por ejemplo, es más instructivo. La gente está encontrando 
        problemas de seguridad más rápidamente en Linux, y se están corrigiendo 
        a un ritmo mucho mayor. El resultado es un sistema operativo que, 
        incluso aunque sólo tiene unos pocos años de antigüedad, es mucho más 
        robusto de lo que Solaris era a su edad.

        * Programas seguros 

        Uno de los grandes beneficios del movimiento de código abierto es el 
        efecto de realimentación positiva que tiene la publicidad. Entre en un 
        gran almacén de ordenadores es estos días, y verá estanterías enteras de 
        productos basados en Linux. La gente los compra, porque el uso de Linux 
        ya no está limitado a los expertos; es una herramienta útil en muchas 
        aplicaciones. El mismo bucle de realimentación funciona en seguridad: 
        los algoritmos y protocolos públicos ganan credibilidad porque se 
        conocen y se utilizan, y por tanto se convierten en la moda. No es un 
        modelo perfecto, pero es mejor que la alternativa. 




        2. ¿CLAVE DE LA NSA EN MICROSOFT CRYPTO API?
        ____________________________________________

        Por Bruce Schneier
        Traducción: Isidre Marques Serret


        Hace unos meses, hablé del sistema de Microsoft para firmar digitalmente 
        las librerías criptográficas que se incluyen en su sistema operativo. El 
        detalle importante es que solo podrán utilizarse las librerías 
        criptográficas firmadas, lo cual hace que cosas como el control de la 
        exportación sean más fáciles. Molesto como es, es el mercado actual.
        Microsoft tiene dos de claves, una primaria y una de reserva. El 
        artículo de CriptoGrama hablaba de ataques basados en el hecho de que 
        una librería criptográfica se considera firmada si está firmada por 
        CUALQUIERA de las claves, y que no hay ningún mecanismo concreto para 
        pasar desde la clave primaria a la de reserva. Es criptografía estúpida, 
        pero es el tipo de cosas que podríamos esperar de Microsoft.

        De repente hay un estallido de actividad de la prensa porque alguien se 
        da cuenta que la segunda clave en la API criptográfica de Microsoft en 
        el Service Pack 5 de Windows NT tiene el nombre de "NSAKEY" en el 
        código. ¡Ajá! La NSA puede firmar librerías criptográficas. Puede usar 
        esta capacidad para instalar una librería criptográfica Troyana en 
        nuestro ordenador. Así la teoría de la conspiración esta en marcha.

        No me lo trago.

        Primero, si la NSA quisiera comprometer la API criptográfica de 
        Microsoft, le resultaría mucho más fácil 1) convencer a MS para que les 
        proporcionara la clave secreta correspondiente a la clave de firmado, 2) 
        conseguir que MS firmara un módulo amañado para la NSA, o 3) instalar un 
        módulo diferente a la API criptográfica para romper el cifrado (ninguna 
        otra de las librerías necesita firma). Siempre es más fácil romper un 
        buen cifrado atacando el generador de números aleatorios que realizando 
        un ataque del tipo fuerza-bruta a la clave.

        Segundo, la NSA no necesita una clave para comprometer la seguridad en 
        Windows. Los programas como el Back Orifice puede hacerlo sin ninguna 
        clave. Para atacar la API criptográfica todavía se necesita que la 
        víctima ejecute un programa (o una macro de Word) en su ordenador. Si 
        puede convencerse a la víctima para que ejecute un programa que no sea 
        de confianza, hay un billón de maneras más inteligentes para comprometer 
        seguridad.

        Tercero, ¿por qué llamaría alguien a una clave secreta de la NSA 
        "NSAKEY"? Una gran cantidad de gente tiene acceso al código original 
        dentro de Microsoft; una conspiración como esta solo debería ser 
        conocida por muy poca gente. Alguien con un debugger podría encontrar 
        esta "NSAKEY." Si esto pretende ser un mecanismo secreto, no es muy 
        secreto.

        Veo dos posibilidades. Uno, que la clave es lo que Microsoft dice, una 
        clave de reserva. Se llama "NSAKEY" por alguna estúpida razón, y eso es 
        todo.

        Dos, que sea realmente un clave de la NSA. Si la NSA pretende utilizar 
        productos Microsoft para sus comunicaciones secretas, van a instalar sus 
        propias librerías criptográficas. No van a querer mostrárselas a nadie, 
        ni siquiera a Microsoft. Querrán firmar sus propias librerías. Así que 
        la clave de reserva podría ser una clave interna de la NSA, para poder 
        instalar sistemas fuertes de criptografía sobre los productos de 
        Microsoft para su propio uso interno.

        Pero no es una clave de la NSA para que puedan debilitar en secreto la 
        criptografía de las masas desprevenidas. Simplemente hay demasiadas 
        cosas más inteligentes que pueden hacer a las desprevenidas masas.

        Mi artículo original:
        http://www.kriptopolis.com/criptograma/cg0012.html#5

        Anuncio:
        http://www.cryptonym.com/hottopics/msft-nsa.html

        Un buen análisis:
        http://ntbugtraq.ntadvice.com/default.asp?sid=1&pid=47&aid=52

        Un artículo interesante en las news:
        http://www.wired.com/news/news/technology/story/21577.html 




        3. COUNTERPANE SYSTEMS: INVESTIGACIÓN DOCUMENTADA
        _________________________________________________

        Por Bruce Schneier
        Traducción: Miguel Camacho


        "Criptoanalisis sobre las extensiones Microsoft de autentificación PPTP 
        (MS-CHAPv2)" 

        Por Bruce Schneier y Mudge, CQRE, Duesseldorf, (en preparación) Oct 
        1999. 

        El protocolo de direccionamiento punto a punto [Point-to-Point Tunneling 
        Protocol (PPTP)] es usado para conexiones PPP seguras sobre enlaces 
        basados en TCP/IP. En respuesta a [SM98], Microsoft publicó extensiones 
        al mecanismo de autenticación de PPTP (MS-CHAP), llamadas MS-CHAPv2. 
        Ofrecemos una visión general de los cambios en la autenticación y 
        generación de claves de MS-CHAPv2, y evaluamos las mejoras y las 
        debilidades que permanecen en la implementación Microsoft del PPTP.
        Mientras se arreglan algunos de los más notorios errores de MS-CHAPv1, 
        el nuevo protocolo todavía adolece de algunas de las mismas debilidades.

        http://www.counterpane.com/pptpv2-paper.html 




        4. NOTICIAS
        __________________________

        Por Bruce Schneier
        Traducción: Miguel Camacho


        * El proyecto de auditoria de Internet. Es realmente interesante. Un 
        grupo realizó una auditoria de seguridad de bajo nivel sobre 36 millones 
        de hosts en internet. ¿De manera imparcial, cómo de segura es en 
        realidad Internet?

        http://www.securityfocus.com/templates/forum_message.html?forum=2&head=32&id 
        =32
        http://www.internetnews.com/intl-news/print/0,1089,6_184381,00.html 

        Y si eso no es suficiente espeluznante, aqui hay una más detallada 
        auditoría sobre 2200 sitios de Internet: 

        http://www.fish.com/survey/ 


        * Mi siempre favorita declaración de conformidad con el 2000 (Y2K):
        http://www.hartscientific.com/y2k.htm 


        * Si necesita más pruebas de que la seguridad de formato propietario no 
        funciona, el formato de seguridad Microsoft de musica digital ha sido 
        reventado durante los dias de su presentación. 

        http://www.wired.com/news/news/technology/story/21325.html
        http://www.news.com/News/Item/0,4,0-40672,00.html?st.ne.lh..ni
        http://www.msnbc.com/news/302195.asp


        * Chantaje de patentes: Abogados de alguien llamado Leon Stambler han 
        estado enviando cartas amenazantes a compañias de seguridad, reclamando 
        que SSL, PCK, FIPS 196, SET, Microsoft PPTP, Authenticode, etc. 
        infringen su patente. Compruébelo por sí mismo; los números de patente 
        son 5,793,302 y 5,646,998.

        http://164.195.100.11/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&
        u=/netahtml/srchnum.htm&r=1&f=G&l=50&s1=
        '5,793,302'.WKU.&OS=PN/5,793,302&RS=
        PN/5,793,302

        http://164.195.100.11/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&
        u=/netahtml/srchnum.htm&r=1&f=G&l=50&s1=
        '5,646,998'.WKU.&OS=PN/5,646,998&RS=
        PN/5,646,998


        * Tras todo lo hablado sobre voto electrónico, es agradable comprobar 
        que algunos reconocen que existen algunos serios problemas de seguridad. 
        El más grave, al menos para mí, es el votante coaccionado. Cuando usted 
        entra en una cabina privada de votación puede votar a quien usted desee. 
        Nadie puede hacer nada contra esto. Si puede votar desde su ordenador, 
        en su propia casa, con algún tipo de medida de seguridad electrónica, 
        entonces es posible para alguien comprar su voto y asegurarse su entrega 
        en su beneficio.

        http://www.nytimes.com/library/tech/99/08/cyber/articles/14vote.html 


        * Algunos me preguntan sobre mi comentario en el ultimo número referente 
        a la necesidad para Windows NT de realizar alrededor de 300 cambios de 
        seguridad para convertirlo en seguro. Yo interrogué al grupo de noticias 
        de Usenet comp.os.ms-windows.nt.admin.security preguntándoles si era 
        exagerado o cierto y conseguí varias respuestas. El consenso parece 
        apuntar que el número estaba entre 50 y 3000 y que 300 no fue una 
        estimación disparatada.

        Una buena lista de comprobación esta disponible aqui:
        http://people.hp.se/stnor/ 

        Mire también:
        http://www.trustedsystems.com/NSAGuide.htm 


        * Las regulaciones de Estados Unidos sobre exportación criptográfica han 
        conducido al desarrollo de excelentes productos por compañias no 
        americanas. Juzguen con este artículo, aunque no sea el único sobre 
        ello.

        http://www.rediff.com/computer/1999/jul/09suri.htm 


        * Dos documentos sobre seguridad de Microsoft. No son gran cosa, pero 
        nos esclarecen la línea que sigue Microsoft.

        Fundamentos en seguridad:
        http://www.microsoft.com/security/resources/security101wp.asp

        Seguridad de macros en Office 2000:
        http://officeupdate.microsoft.com/2000/downloadDetails/o2ksec.htm 


        * Un fallo en Hotmail permite a cualquiera leer el correo de cualquier 
        usuario, sin ninguna clave de acceso. Para mí, lo realmente interesante 
        de esta historia no es que el fallo fuera descubierto, sino que quizás 
        haya sido conocido por la comunidad underground mucho antes de que fuera 
        público.

        Algunas historias nuevas que aluden a ello:

        http://www.wired.com/news/news/technology/story/21503.html
        http://www.msnbc.com:80/news/306093.asp
        http://www.zdnet.com.au:80/zdnn/stories/zdnn_display/0,3440,2324361,00.html
        http://news.excite.com/news/zd/990901/10/the-bug-syndrome
        http://news.excite.com/news/zd/990901/06/how-hotmail-blew
        http://www.salon.com/tech/log/1999/09/02/hotmail_hack/print.html 


        * Escultura cifrada en el cuartel general de la CIA en Langley, 
        Virginia.

        http://www.npr.org/programs/atc/990826.kryptos.html 


        * Únete a los militares y visita los sótanos de Ft. Meade. La Agencia de 
        Seguridad Nacional ofrece alojamiento, manutención e intrucción 
        académica gratis a los hackers que deseen trabajar para ellos durante 
        cinco años tras su graduación.

        http://www.currents.net/newstoday/99/08/27/news3.html
        http://www.cnn.com/TECH/computing/9908/26/t_t/teen.hacker/index.html 


        * Ameno artículo de la BBC sobre el debate del cifrado en EEUU:

        http://news.bbc.co.uk/hi/english/world/americas/newsid_430000/430384.stm


        * Divertido tema: la historia real de Alice y Bob:

        http://www.conceptlabs.co.uk/alicebob.html 


        * Este fue realmente un muy buen artículo -- claro, completo, 
        comprensible -- publicado recientemente en _The Sciences_ sobre cálculo 
        cuántico. Cryptome ha colocado el artículo en línea, con el permiso del 
        autor.

        http://cryptome.org/qc-grover.htm 




        5. NOTICIAS EXTREMEDAMENTE PREOCUPANTE
        ______________________________________

        Por Bruce Schneier
        Traducción: Sergio Pozo Hidalgo


        El Departamento de Justicia está planeando solicitar al Congreso una 
        licencia para permitir a los agentes federales provistos de órdenes de 
        registro, entrar de forma secreta en casas y oficinas para obtener 
        llaves de descifrado o claves, para implantar "dispositivos de 
        recuperación", o si no, para modificar ordenadores para asegurar que 
        cualquier mensaje o fichero cifrado pueda ser leído por el gobierno.
        Con esta dramática propuesta, la Administración Clinton está diciendo 
        básicamente: "si no se apresura a darle su llave a un tercero, 
        entraremos de forma encubierta en su casa para conseguirla si tenemos 
        sospechas de una conducta criminal".

        El texto completo de la propuesta del Departamento de Justicia, un 
        análisis sección a sección preparado por los abogados del DOJ 
        (Department Of Justice - Departamento de Justicia) y material 
        relacionado está disponible en:

        http://www.epic.org/crypto/legislation/cesa_release.html
        http://www.cdt.org/crypto/CESA
        http://www.washingtonpost.com/wp-srv/business/daily/aug99/encryption20.htm
        http://www.zdnet.com/zdnn/stories/news/0,4586,2317907,00.html
        http://www.techweb.com/wire/story/TWB19990820S0012 




        6. NOTICIAS DE COUNTERPANE
        __________________________

        Por Bruce Schneier
        Traducción: Sergio Pozo Hidalgo


        Bruce Schneier hablará en SANS Network Security 99, del 3 al 10 de 
        Octubre en Nueva Orleans. Mire en http://www.sans.org/ns99/ns99.htm para 
        más detalles sobre la conferencia.

        Árboles de ataque: Miércoles, 6 de Octubre, 10:30 - 12:30
        Criptografía en Internet: Martes, 5 de Octubre, 9:00 - 5:00 

        Bruce Schneier escribió la columna "Riesgos internos" de las ediciones 
        de Agosto, SepTiembre y Octubre de "Comunicaciones de la ACM".

        Biometría: usos y abusos:
        http://www.counterpane.com/insiderisks1.html 

        La carrera del caballo de Troya:
        http://www.counterpane.com/insiderisks2.html 

        Riesgos de confiar en la Criptografía:
        http://www.counterpane.com/insiderisks3.html 




        7. EN LA RATONERA: E-TRADE
        __________________________

        Por Bruce Schneier
        Traducción: Angel Galindo Sánchez


        La seguridad de clave de E*Trade no es tal. Limitan la clave de entrada 
        a un máximo de 6 caracteres, y las únicas elecciones son letras (se 
        distingue entre mayúsculas y minúsculas), números, $, y _. ¿Con qué 
        cartera quiere negociar hoy? 




        8. FACTORIZAR UN NÚMERO DE 512 BIT
        __________________________________

        Por Bruce Schneier
        Traducción: Sergio Pozo Hidalgo


        Un record de factorización fue roto el 22 de Agosto pasado. Un grupo 
        liderado por Herman te Riele de CWI en Amsterdam factorizó un difícil 
        número de 512-bit (155 dígitos). Con "difícil" quiero decir que era el 
        producto de dos primos de 78 dígitos... el tipo de números usado por el 
        algoritmo RSA.

        Alrededor de 300 estaciones de trabajo SGI y PCs Pentium hicieron el 
        trabajo, mayoritariamente en noches y fines de semana, en el transcurso 
        de siete meses. El algoritmo usado fue el de siembra en campo numérico. 
        Tiene dos partes: la etapa del tamiz y la etapa de reducción de la 
        matriz. La primera fue en la que trabajaron los 300 ordenadores: sobre 
        8000 MIPS-años en 3,7 meses (esta es la parte que el dispositivo TWINKLE 
        de Shamir puede acelerar). La etapa de reducción de la matriz requirió 
        224 horas de CPU (y al rededor de 3,2Gb de memoria) en el Cray C916 en 
        el Centro Académico de Cmputación de Amsterdam SARA.

        El esfuerzo completo fue 50 veces más fácil que romper DES. Factorizar 
        llaves de comercio electrónico es, definitivamente, muy práctico, y 
        llegará a serlo mucho más en unos pocos años. Ciertamente es razonable 
        esperar que números de 768-bit sean factorizados en unos pocos años, 
        luego los comentarios de los laboratorios RSA sobre que las llaves RSA 
        sean de un mínimo de 768 bits son muy optimistas.

        Certicom usó el evento para ganar votos sobre los beneficios de la 
        criptografía de llave pública de curva elíptica. Los algoritmos de curva 
        elíptica, al contrario que los algoritmos como RSA, ElGamal y DSA, no 
        son vulnerables a las técnicas matemáticas que pueden factorizar estos 
        grandes números. Por consiguiente, razonan, los algoritmos de curva 
        elíptica son más seguros que los RSA y demás. Hay algo de cierto aquí, 
        pero sólo si acepta la premisa de que los algoritmos de curva elíptica 
        tienen matemáticas fundamentalmente diferentes. Escribí sobre ésto 
        anteriormente; en resumen, debe usar criptografía de curva elíptica si 
        las consideraciones de memoria lo demandan, pero RSA con llaves largas 
        es probablemente más seguro.

        Este evento es significativo por dos razones. Una, la mayoría de los 
        protocolos de Internet utiliza RSA de 512-bit. Esto significa que los no 
        criptógrafos tomarán nota de ello y probablemetne les entrará un poco de 
        pánico. Y dos, al contrario que otros esfuerzos de factorización, este 
        fue realizado por una organización en secreto. La mayoría de los 
        criptógrafos no supieron que este esfuerzo se estaba llevando a cabo. 
        Esto demuestra que otras organizaciones podrían estar rompiendo llaves 
        de comercio electrónico regularmente y no contándoselo a nadie.

        Como de costumbre, la prensa está tomando este argumento de forma 
        errónea. Dicen cosas como: "las llaves de 512-bit ya no son seguras". 
        Esto está completamente fuera de lugar. Como muchos de estos argumentos 
        de criptoanálisis, las noticias reales son que no hay noticias. La 
        complejidad del esfuerzo de factorización no fue una sorpresa; no hubo 
        avances matemáticos en el trabajo. Factorizar un número de 512-bit 
        requirió más o menos el mismo poder de computación que la gente predijo. 
        Si las llaves de 512-bit son inseguras hoy, eran igual de inseguras el 
        mes pasado. Cualquiera que implemente RSA debería haber cambiado a 
        claves de 1024-bit hace algunos años, y debería estar pensando en llaves 
        de 2048-bit hoy. Es agotador comprobar como no se escucha a los 
        criptógrafos cuando dicen que algo es inseguro, esperando en cambio que 
        alguien demuestre palpablemente la inseguridad.

        http://www.cwi.nl/~kik/persb-UK.html
        http://www.msnbc.com/news/305553.asp 

        Análisis de RSA
        http://www.rsa.com/rsalabs/html/rsa155.html 

        Refutación de Certicom
        http://www.certicom.com/press/RSA-155.htm 

        Webs notables que usan todavía RSA de 512-bit:

        Travelocity
        Tienda en línea Microsoft
        Tienda en línea Compaq
        Tienda en línea Godiva
        Dr. Koop.com
        Flowers N More


        Hay muchos más. Puede comprobarlo usted mismo conectando con una web con 
        una versión doméstica (EEUU) segura de Internet Explorer 4.0.





        9. COMENTARIOS DE LOS LECTORES
        ______________________________

        Por Bruce Schneier
        Traducción: Juan Cruz Ruiz de Gauna (artículos 1 y 2) y David Gómez 
        (artículos 3, 4, 5 y 6)


        De: Gene Spafford spaf@cs.purdue.edu
        Asunto: Re: Comentarios sobre la clave "NSA" en Windows NT
        ----------------------------------------------------------

        Bien, siempre es más fácil creer en una teoría de la conspiración o en 
        diseños oscuros. Sin embargo, puede haber explicaciones alternativas.
        Por ejemplo, da la casualidad de que sé que varias agencias de 3 letras 
        usan un montón de máquinas Windows (en cualquier caso, este hecho 
        debiera producir terror por si solo). Supongamos que dichas agencias 
        desean cargar versiones propias de sus rutinas de cifrado altamente 
        clasificadas. ¿Pensáis que enviarían copias de su código a Redmond para 
        que se lo firmen de forma que pueda ser cargado? ¿o lo firmarán ellos 
        mismos, con su propia clave, haciéndolo en la propia empresa, donde es 
        "seguro? Si van a hacerlo en su propia empresa, entonces o bien 
        Microsoft comparte su clave privada con ellos (mala idea), o el código 
        debe permitir acomodar una segunda clave generada por la agencia. Ummm, 
        esto suena familiar ¿no créeis?.

        Otra explicación que leí aquí (este tema se ha discutido en varias 
        listas) es que para obtener la aprobación para la exportación, los 
        chicos de Microsoft necesitaban incluir una clave de "respaldo" en caso 
        de que la primera se viese comprometida de alguna manera. Necesitarían 
        cambiarla para usar la clave alternativa en todos los sistemas. ¿Pero 
        cómo lo harían a menos que la segunda clave ya estuviese instalada, de 
        forma que pudiesen realizar el cambio usando esta segunda clave?. Por lo 
        tanto, si fueseis Microsoft y la NSA os solicitase instalar una clave de 
        respaldo como ésta, ¿cómo la llamariáis?.

        Por supuesto, también puede suceder que Microsoft quisiese usar una 
        segunda clave por decisión propia, y que el programador envuelto en el 
        código decidiese nombrarla de una forma bastante tonta.
        También hay una historia sobre código de Microsoft que se pone en 
        circulación con elementos de código no documentados y cosas que los 
        gestores de Microsoft ignoran que están presentes. Supongamos que el 
        código (nos referimos tan solo a unas pocas líneas de código) fue puesto 
        ahí por un agente de los servicios de inteligencia de algún otro país 
        (no debiera ser tan difícil corromper a algún empleado o incluso 
        introducir uno en Microsoft con buenas capacidades para desarrollar 
        código que pudiese conseguir acceso eventualmente al código apropiado). 
        El/ella nombra las variables introducidas con las siglas "NSA" para 
        prevenir revisiones del código e incluye un bloque de comentarios que 
        dice "La NSA nos ha solicitado que esto esté aquí -- no cambiar o 
        realizar preguntas". El "siniestro propósito" es cierto, pero estamos 
        culpando a la entidad equivocada.

        ¡Qué diablos!, puede incluso que éste sea un propósito del propio Sr. 
        Gates: Después de todo está teniendo una fuerte disputa con el 
        Departamento de Justicia de los Estados Unidos.

        Hay otras posibles razones para el nombre.

        Estas posibles explicaciones no quieren decir que la clave extra no 
        tenga efectos laterales (como instalaciones clandestinas y sortear los 
        obstáculos de los controles de exportación). Y, por supuesto, 
        probablemente nunca sepamos cuál es el propósito principal de esta clave 
        ni qué papel juegan estos efectos laterales en la decisión de usar dicha 
        clave, a pesar de las eventuales quejas de la gente.

        El pensamiento principal es que puede haber posibles escenarios para el 
        nombre de la clave que no impliquen actividad perjudicial, o que no 
        impliquen dicha actividad a cargo de la NSA. Esa no debiera ser la 
        conclusión inmediata a la que llegue la gente.

        Y, aún a riesgo de comenzar una diatriba, permitidme realizar una 
        pregunta (retórica): Incluso si la clave fue puesta ahí con propósitos 
        de monitorización clandestina, ¿qué hay de malo en ello? si se usa para 
        controlar a terroristas, cárteles de droga o laboratorios de armas en 
        Iraq?; ¿no es eso lo que deseamos que suceda?. En este caso, ¡deberiamos 
        ser conscientes de que este control ha sido descubierto y, posiblemente, 
        ya no tiene valor!. La historia de la criptografía muestra -- 
        repetidamente -- que tener ventajas criptográficas supone una diferencia 
        enorme en tiempos de conflicto, y que poner esas ventajas en su sitio y 
        funcionando lleva tiempo. Sería ingenuo creer que estas amenazas no se 
        ciernen sobre nosotros, o que no hay probabilidades de que eso suceda en 
        el futuro.

        Debieramos tener claro en nuestras discusiones si el asunto a tratar es 
        la presencia del código o quién puede tener el control de dicho código. 
        El tema principal es ¿Qué controles se ponen para asegurar que el código 
        no sea usado contra objetivos inapropiados (Por ej., personas 
        respetuosas de la ley, negocios legales y ciudadanos)?. 

        Desafortunadamente carecemos de garantías seguras en este campo, y ha 
        habido abusos en el pasado (o presuntos abusos). Pero esto debieramos 
        planteárnoslo si el código fue puesto para los oscuros propósitos de 
        algún otro grupo. 



        De: "Lucky Green" shamrock@cypherpunks.to
        Asunto: Más cavilaciones sobre la NSAKEY
        -----------------------------------------

        Me gustaría comentar alguna de tus opiniones públicas acerca de la 
        NSAKEY. El objetivo de este email es ofrecer algunos datos acerca del 
        modo de pensar de las agencias de inteligencia cuando intentar poner en 
        peligro (desestabilizar) sistemas.

        En primer lugar, estoy de acuerdo con tu afirmación de que la NSA no 
        necesita desproteger la CAPI para desproteger a los ordenadores que 
        ejecutan Windows. Lo que no es lo mismo que afirmar que la NSA no busca 
        comprometer la CAPI obligando a Microsoft a instalar la clave NSA.
        Para los criptógrafos académicos, una vez que un fallo catastrófico ha 
        sido hallado en un cifrado, el trabajo ya está terminado. "Tenemos un 
        ataque 2^16. El trabajo ha sido realizado. Vámonos a casa". Las agencias 
        de inteligencia no funcionan de esta manera.

        Mi trabajo con GSM ha revelado que las agencias de inteligencia, que 
        como todos sabemos últimamente están detrás de los cifrados GSM, 
        realizan una aproximación muy diferente. Las agencias de inteligencia 
        intentarán comprometer cada componente individual de un sistema de 
        cifrado que permita ser comprometido. Las agencias de inteligencia 
        comprometerán, si tienen la oportunidad, un componente simplemente 
        porque pueden hacerlo, no porque lo necesiten. Esto puede parecer una 
        manifestación extraña de implementar redundancia múltiple en un sistema. 
        Lo que, estoy seguro de que en esto todos estamos de acuerdo, es 
        generalmente una buena idea.

        En el caso del GSM, hemos descubierto las siguientes desestabilizaciones 
        (o compromisos):

        o Desestabilización de generación de clave.

        Las claves de 64 bits tienen los últimos 10 bits puestos a cero. (He 
        oido rumores acerca de que algunas implementaciones sólo ponen a cero 
        los últimos 8 bits, pero en cualquier caso es innegable que la entropía 
        de la clave queda comprometida).

        o Desestabilización del sistema de autenticación y algoritmo de 
        generación de claves.

        El GSM MoU fue avisado formalmente en 1989 (o 1990 como muy tarde) sobre 
        los fallos que habiamos descubierto el año anterior en COMP128. Mucho 
        antes de que GSM fuese ampliamente interceptado. El Grupo de Expertos en 
        Algoritmos de Seguridad del MoU (SAGE Security Algorithm Group of 
        Experts), compuesto por personas cuyas identidades son desconocidas 
        hasta ahora, mantuvo este descubrimiento en secreto y no informo sobre 
        él ni siquiera a los propios miembros del MoU. Como resultado, las 
        agencias de inteligencia pudieron clonar teléfonos y calcular las claves 
        privadas de voz usadas durante una llamada.

        o Desestabilización del algoritmo robusto de privacidad de voz A5/1.

        Este cifrado de 64 bits tiene numerosos "fallos" de diseño, dando como 
        resultado una resistencia de como mucho 40 bits. Es inconcebible para 
        mí, y virtualmente para todos aquellos con los que he hablado de este 
        tema, que estos fallos obvios fueran pasados por alto por sus 
        diseñadores militares franceses.

        o Desestabilización del algoritmo débil de privacidad A5/2.

        El MoU admite que la fragilidad fue la meta del diseño del A5/2, incluso 
        sabiendo que el SAGE indicó en sus análisis oficiales que no eran 
        conscientes de ningún fallo criptográfico en el A5/2.

        Para permitir intercepción y descifrado en el tráfico GSM, bastaría con 
        comprometer la longitud efectiva de la clave. Bastaría con comprometer 
        la generación de la clave. Habría sido suficiente con comprometer los 
        cifrados. La NSA/GCHQ hizo las tres cosas.

        Dados estos hechos, no sería inusual que la NSA instalase por sí misma 
        puertas traseras en el sistema operativo Windows *y* obtuviese una copia 
        de la clave de firmas de Microsoft *y* obligase a Microsoft a instalar 
        la propia clave de la NSA.

        Pensemos en ello como un buen diseño de desestabilización redundante. 


        De: "Kevin F. Quinn" kevq@banana.demon.co.uk
        Tema: Criptograma de Abril y el reciente debate sobre la clave de 
        repuesto NSA
        -----------------------------------------------------------------

        En el CriptoGrama del 15 de Abril de 1999, mencionaste el enfoque de las 
        dos claves de Microsoft en referencia a sus claves principales para 
        Authenticode, y que ellos incluían las dos claves "presumiblemente por 
        si una de ellas alguna vez es comprometida". Ahora sabemos que el mismo 
        enfoque fue empleado por los CSP (proveedores de servicios 
        criptográficos). El propio comunicado de Microsoft sobre el asunto es 
        interesante; las dos claves estan presentes "en caso de que la clave 
        principal sea destruida" (literalmente). Creo que en tu CriptoGrama 
        querías decir "destruida" mas que "comprometida" -- Microsoft parece 
        estar intentando protegerse contra la posibilidad de que la clave 
        principal secreta se queme en un incendio o algo asi; no se estan 
        protegiendo contra copias no autorizadas de la clave hecha con el 
        enfoque de las dos claves. Creo que es una distinción importante a tener 
        en cuenta.

        La única buena razón que puedo ver para tener dos claves, es 
        proporcionar seguridad contra el compromiso -- en cuyo caso necesitaras 
        validar las firmas contra ambas claves (i.e., AND en vez de OR). De esa 
        manera si una clave es comprometida, la validación todavia fallará ya 
        que la segunda firma no será valida. Si ambas claves son almacenadas en 
        lugares seguros separados, el atacante tendrá que romper la seguridad de 
        ambos lugares para obtener ambas claves, esperarando tú poder darte 
        cuenta de la primera intrusión antes de que ocurra la segunda. La manera 
        sensata de protegerse contra la posibilidad de destrucción (incendio, 
        catastrofe, etc...) es tener varias copias, cada una almacenada con 
        seguridad y monitorizada (de la misma manera que son controlados los 
        documentos clasificados.

        Microsoft reclama que el enfoque de las dos claves fue sugerido por la 
        NSA -- Yo encuentro dificil de creer que la NSA sugiriera incluir dos 
        claves principales, para protegerse contra la destrucción de una de 
        ellas. Mi teoría favorita es que había un problema de comunicación; el 
        consejo de la NSA seguía más o menos las lineas de, "tener dos claves 
        principales protegidas contra pérdidas", queriendo decir compromiso, y 
        Microsoft lo interpretó como destrucción. 


        De: Greg Guerin glguerin@amug.org
        Asunto: ¿Nuevo giro del asunto de la NSA-key/NT? 
        ------------------------------------------------

        En tu artículo en CriptoGrama, acabas diciendo: "Este virus no existe 
        todavía, pero podría ser escrito." [Este es un virus que sustituiría la 
        clave de backup en NT con una clave falsa, y podría engañar al usuario 
        para aceptar código malicioso como firmado.]

        Después de escribir http://amug.org/~glguerin/opinion/win-nsa-key.html, 
        se me ocurrió que el virus ya existe, o al menos todas sus partes 
        existen. Solo necesita "transformarse al Lado Oscuro" y ser ensamblado. 
        El "kit de construcción" para este virus no es otro que el "programa de 
        reparación" en:
        http://www.cryptonym.com/hottopics/msft-nsa/ReplaceNsaKey.zip

        Todas las partes están ahi. El programa "AddDelCsp.exe" (no se 
        proporcionan las fuentes) es el agente de infección activo. 
        "nsarplce.dll" y otras DLL's son las "toxinas". El kit incluye incluso 
        "TestReplacement.exe" (con las fuentes) para comprobar si algún joven 
        emprendedor constructor de kits ha realizado sus cambios con éxitos o 
        no.

        Estoy sólo suponiendo, pero alguien con habilidad en programación sobre 
        Wintel podría probablemente construir un virus o Caballo de Troya con 
        este kit en cuestión de horas. Probablemente la única habilidad que 
        tendrían que pulir es la criptografía, pero hay alguna información buena 
        para comenzar en el mismo informe de Fernandes. Un poco de lectura, un 
        poco de tiempo de generación de claves, quizas unas pocas correciones, y 
        listo. Se prueba en un sistema NT local, y entonces se publica al mundo 
        haciendo un mirror del informe de Fernandes. O simplemente se envía a 
        algunos "amigos" via Hotmail. Ciertamente parecería auténtica, e incluso 
        como el programa de "reparación" estaba sin firmar, y el informe 
        original no dice nada acerca de autentificar la descarga antes de 
        ejecutarla, podría ser un Caballo de Troya bien preparado.

        Si este virulento "programa de reparación" se escribe de forma 
        silenciosa, puede extenderse MUY lejos antes de que nadie se de cuenta. 
        Podría incluso camuflarse a si mismo y nombrar su clave toxica como 
        "NSAKEY", justo como la original de Microsoft. Es decir, después de 
        "borrarse" a si mismo, esta todavía presente. ¿Con que frecuencia a la 
        gente se le ocurriría pensar en comprobar esa clave?

        Si conoces a alguien con experiencia de programación en NT, puede ser 
        interesante darles a leer el informe de Fernandes, bajarse el kit de 
        construcción del virus, ehem, quiero decir, programa de "reparación" y 
        entonces intentar hacer esto. Supongo que no serían necesarias 
        habilidades previas en la escritura de virus, solo habilidades de 
        programación en NT por encima de la media. Apuesto a que tendrías una 
        versión virulenta en menos de una tarde. Un proyecto interesante para la 
        perezosa fiesta del Dia del Trabajo, ¿eh? 


        De: Sam Kissetner
        Asunto: Meganet 
        ------------------

        Pensé que esto podía distraerte. El boletín de Febrero de CriptoGrama se 
        rie de la pagina web de Meganet por decir:
        Claves simétricas de 1 millón de bits -- La oferta del mercado tiene 
        sólo 40-160 bits!! 

        Visité la pagina hoy. (La URL cambió; está en 
        http://www.meganet.com/index.htm). Quizás lean CriptoGrama, porque 
        intentaron arreglar el error gramatical. Pero era parte de un gráfico, 
        asi que simplemente pegaron una pequeña caja blanca sobre el apóstrofe y 
        la s, dejando: 
        Claves simétricas de 1 millón de bits -- El mercado oferta sólo 40-160 
        bits!! 

        Vaya, eso está *mucho* mejor.

        (N. del T: Las frases originales son:
        -1 million bit symmetric keys -- The market offer's [sic] 40-160 bit 
        only!!
        -1 million bit symmetric keys -- The market offer 40-160 bit only!!! ) 


        De: Marcus Leech mleech@nortelnetworks.com
        Asunto: Descripción de crypt(1) de HP 
        ------------------------------------------

        Siendo sinceros con HP, y crypt(1) -- HP simplemente ha reproducido con 
        fidelidad la pagina MAN original de crypt(1). Crypt(1) apareció por 
        primera vez en Unix V7, volviendo la vista a 1978 -- en un tiempo en que 
        DES estaba comenzando a ser usado en ciertas áreas limitadas. Que un 
        sistema operativo tuviera cualquier tipo de facilidad de cifrado de 
        ficheros era como un milagro en aquella época. Sun obviamente ha 
        modificado ligeramente la documentación para reflejar la realidad 
        actual, mientras HP ha elegido el enfoque de permanecer fiel a la 
        documentación original. 


      _____________________________________________________________________

      
            CriptoGRAMA es la versión española de Crypto-GRAM, elaborada por el equipo 
      de traductores de Kriptópolis, con autorización expresa de Bruce Schneier. 
 
      Este ejemplar nunca hubiera sido posible sin la colaboración desinteresada
      de las siguientes personas:

             *  Angel Galindo Sánchez
             *  Isidre Marques Serret
             *  Miguel Camacho
             *  Sergio Pozo Hidalgo
             *  Juan Cruz Ruiz de Gauna
             *  David Gómez

      _____________________________________________________________________



      -- AVISO IMPORTANTE --

      Kriptópolis dispone de la pertinente autorización de Bruce Schneier 
      para traducir, elaborar y publicar la versión española de su boletín 
      Crypto-GRAM. La información contenida en CriptoGRAMA sólo puede ser 
      redistribuida siempre que se haga de forma completa y con expresa 
      mención de Bruce Schneier como autor de Crypto-GRAM y de Kriptópolis 
      como responsable de CriptoGRAMA.


      Crypto-GRAM es un boletín mensual gratuito dedicado a resúmenes, análisis, 
      comentarios e ideas sobre criptografía y seguridad informática. 
      Crypto-GRAM es elaborado por Bruce Schneier, presidente de Counterpane 
      Systems, autor de "Applied Cryptography" y creador de los algoritmos 
      Blowfish, Twofish y Yarrow. Schneier ha pertenecido a la dirección de la 
      International Association for Cryptologic Research, EPIC y VTW, y es 
      asiduo escritor y conferenciante sobre criptografía.



      Versión Web de este ejemplar:
      http://www.kriptopolis.com/criptograma/cg0017.html


      © Bruce Schneier
      © Kriptopolis (versión en Español).


      _____________________________________________________________________

