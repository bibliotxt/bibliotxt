-[ 0x0A ]--------------------------------------------------------------------
-[ Microcontroladores ]------------------------------------------------------
-[ by blackngel ]----------------------------------------------------SET-29--

                                                                        
                       blackngel_hack@hotmail.com                        

                          MICROCONTROLADORES

                     "Bienvenidos al mundo de lo real..."


============================================================================
£££££££££££££££££££££££ 0.- INDICE £££££££££££££££££££££££££££££££££££££££££
============================================================================



                0 -->> INDICE
                1 -->> INTRODUCCION
                2 -->> APLICACIONES
                3 -->> CIRCUITO SENCILLO
                4 -->> CROCODILE TECHNOLOGY
                5 -->> PROGRAMACION DE UN MICROCONTROLADOR
                6 -->> DATOS TECNICOS
                7 -->> HISTORIA
                8 -->> DESPEDIDA



============================================================================
£££££££££££££££££££££££ 1.- INTRODUCCION £££££££££££££££££££££££££££££££££££
============================================================================



El control por ordenador presenta un problema: el sistema controlado tiene
que estar siempre conectado al ordenador. Asi, un microondas o una lavadora
tendrian que tener su propio ordenador, y un robot no podria alejarse mas de
unos centimetros de la tarjeta controladora.

Afortunadamente, existen circuitos integrados que resuelven este problema.
Permiten realizar gran numero de tareas y son muy parecidos a los 
ordenadores.

Un ordenador contiene un microprocesador que controla el resto de los
elementos, una memoria en la que se almacenan datos e instrucciones, asi
como una serie de tarjetas o unidades de entrada/salida encargadas de 
recibir
y enviar informacion a los perifericos.


  _______     __________________     ________________      ***********
|       |   |      memoria     |   |  unidades de:  |=>    * mundo   *
| micro |<=>| datos e instrucc |<=>| entrada/salida |     * exterior: *
|_______|   |__________________|   |________________|<=  * perifericos *
                                                         ***************


-Crees que es posible introducir un ordenador en un pequeÏo chip del tamaÏo
de una uÏa? El desarrollo de la electronica ha permitido este prodigio.

Se denominan microcontroladores los circuitos integrados que contienen 
todos los elementos de un ordenador.



============================================================================
£££££££££££££££££££££££ 2.- APLICACIONES £££££££££££££££££££££££££££££££££££
============================================================================


Los microcontroladores, tambien conocidos como PIC (controladores 
programables inteligentes), pueden obtener datos del exterior, ya sean 
analogicos (como la temperatura o intesidad de luz) o digitales (como el 
accionamiento de un pulsador), para despues procesar esos datos y accionar 
distintos dispositivos:


    __   pulsador   ____________    alarma     _
   _| -------------|            |-------------|_|
         a_temp    |            |   lampara    _
    / -------------|   *micro   |-------------|_|
         a_luz     |   ------   |   radiador   _
    / -------------|            |-------------|_|
                   |____________|

  * Esquema del funcionamiento de un microcontrolador.


============================================================================
£££££££££££££££££££££££ 3.- CIRCUITO SENCILLO ££££££££££££££££££££££££££££££
============================================================================



Para entender como funcionan los microcontroladores,vamos a diseÏar una
aplicacion muy sencilla: una maquina expendedora de bebidas.

   _                                                    _______
  | |   __   entrada0   ____________    salida3    _   |  * *  |
  |(|  _| -------------|            |-------------|_|  | *Cok* |
  |_|   __   entrada1  |            |   salida2    _   |__*_*__|
       _| -------------|            |-------------|_|
        __   entrada2  |            |   salida1    _
       _| -------------|            |-------------|_|
        __   entrada3  |            |   salida0    _
       _| -------------|____________|-------------|_|

Los microcontroladores, al igual que los ordenadores, pueden ser programados.
El diagrama de flujo representa el programa que ejecuta el microcontrolador:
                         ________
                        (_INICIO_)
                            || ____________
                       _____\/_____        |
                      /entrada0 on?\_NO_>>_|
                      \____________/
                            || SI
                    ________\/________
                   /switch on salida3/
                  /_________________/
                            ||
                           _\/__
                          (_FIN_)

Fijate en el diagrama de flujo de la maquina expendedora de bebidas. En el,
el programa esta continuamente pendiente de la entrada 0. Cuando se introduce
una moneda (entrada0 on), se activa la salida 3 (switch on salida3), que
entrega una lata de refresco. Una vez realizado esto, concluye el programa.


@@ PROGRAMANDO
@@@@@@@@@@@@@@

Los microcontroladores se programan en un lenguaje complejo denominado
ensamblador. Tambien pueden programarse en Basic.

Para ello, una vez escrito el programa en un ordenador, se conecta el
microcontrolador al ordenador a traves del puerto serie o paralelo, y se copia
el programa en la memoria del microcontrolador.

Despues ya se puede desconectar y colocar en cualquier sistema que se desee
controlar.

El programa que controla la maquina de bebidas seria el siguiente:

    IF Entrada0 = 1 THEN Lata
    GOTO Comienzo 'Ir a comienzo
    HICH Salida3 'Salida3 = 1 --> Lata fuera
    STOP 'Fin del programa

Si lo pensamos bien, nos daremos cuenta de que despues de que la maquina de
bebidas expulse la lata, la Salida3 continuara abierta, pues bien, la
instruccion en este caso para desactivarla antes de volver al comienzo seria
'LOW Salida3'.



============================================================================
£££££££££££££££££££££££ 4.- CROCODILE TECHNOLOGY £££££££££££££££££££££££££££
============================================================================



Este programa permite simular circuitos con microcontroladores. De esta manera,
es posible verificar su funcionamiento antes de montarlos.
Puedes conseguir una version de evaluacion del programa Crocodile Technology
en la siguiente direccion: "www.crocodile-clips.com".

Los pasos que hay que seguir para realizar un montaje son los descritos a
continuacion:

** En la barra de herramientas seleccionamos Componentes digitales.

** Aparece una nueva barra:
     - Los cinco botones centrales representan respectivamente: Elementos de
       entrada, Puertas logicas, Microcontroladores, Circuitos integrados y
       lementos de salida.

** Comenzamos colocando el microcontrolador. Con este fin, seleccionamos la
    opcion Microcontroladores > AÏadir microcontrolador. Una vez colocado en 
la
    barra de herramientas, seleccionamos 18 pin PIC y en Opciones avanzadas
    escribimos el nombre y numero de patillas de entrada y salida:

    Label -> in0:      Entrada0
    Visible inputs:    Digital -> 4
    Visible outputs            -> 4

** Para aÏadir el detector de monedas, tiene que activarse el boton Elementos
   de entrada, con lo que aparece la siguiente barra de herramientas y en ella
   seleccionamos el detector de monedas y lo conectamos a la entrada0.

** Para terminar el circuito, solamente queda aÏadir el expendedor de latas.
   Con este fin, hacemos clic sobre el boton de Elementos de salida,
   seleccionamos despues Expendedor de latas y lo conectamos a la salida3.


@@ PROGRAMACION DEL MICROCONTROLADOR
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Con objeto de realizar el diagrama de flujo que va a ejecutar el
microcontrolador en la barra de herramientas principal, seleccionamos Ver barra
de diagramas de flujo. Apareceran los distintos elementos que pueden emplearse
en el programa que estamos diseÏando.
                          _______
                         (_START_)
                            || ____________
                       _____\/_____        |
                      /entrada0 on?\_NO_>>_|
                      \____________/
                            || SI
                    ________\/________
                   /switch on salida3/
                  /_________________/
                            ||
                          __\/__
                         (_STOP_)

Puedes probar el funcionamiento del microcontrolador haciendo clic sobre el
boton |I>| (play). El programa se mantiene observando la entrada0. Si ahora
introduces una moneda (haciendo clic sobre ella), aparecera un refresco.

-- Si quieres mantenerte entretenido y no aburrirte realiza un circuito
   controlado por microcontrolador que active una alarma al abrir una ventana.



============================================================================
£££££££££££££££££££££££ 5.- PROGRAMACION DE UN MICROCONTROLADOR ££££££££££££
============================================================================


Y por fin llegamos a la parte mas practica de todas, seguro que no os
aburrireis, en esta seccion aprenderas a construir un circuito que, conectado
al ordenador, te permita grabar los programas en un microcontrolador.

Tambien te familiarizaras con el empleo de un programa que lleve a cabo el
transvase de informacion desde el ordenador hasta el microcontrolador.



@@ EL PROGRAMADOR
@@@@@@@@@@@@@@@@@

Hay que escribir en el ordenador los programas que se van a almacenar en el
microcontrolador. Para traspasarlos a este, es necesario un circuito que se
conectara al ordenador a traves del puerto serie. Una vez grabado el 
programa
en el microcontrolador ya podras conectar este en su circuito.

Para nuestros propositos utilizaremos el microcontrolador PIC 16F84 que 
podemos
encontrar en cualquier tienda de electronica.

# El programador que presento a continuacion se puede comprar tambien en tu
  tienda de electronica habitual la unica diferencia es que normalmente en vez
  de venir equipado con un conector DB9 lo hara con uno DB25, para el que no le
  suene, este es el conector para el puerto paralelo, "si, el de la impresora".
  Este detalle no influira de ninguna manera en la programacion del PIC.

En los siguientes diagramas podras observar el circuito del programador, un
esquema del conectar para el ordenador y el material necesario para realizar
el montaje:

- Si quereis la imagen del circuito conectado al ordenador mailme a
  blackngel_hack@hotmail.com y os lo enviare sin ningun problema, tambien os
  puedo enviar ilustraciones del PIC 16F84 asi como de los diagramas que
  expuse anteriormente, pero seran de mejor compresion grafica.

MATERIALES
----------

* 4 diodos 1N4148
* 2 diodos Zener (5,1 V y 8,2 V)
* 2 transistores BC548
* 2 resistencias (1,5 kohm y 10 kohm)
* 2 condensadores electroliticos (100 uF y 22 uF)
* 1 conector DB9 para el puerto serie.

CIRCUITO
--------                                                       ______
___________________________________________________\\_________|_TxD__|
|                                                              ______
|                ___________@_________@____________\\_________|tierra|
|       _________)______    |         |                        ------
|       |        |   _4|__14|1,3,10  _|_
| 1N4148|        |  |      Vdd |     | | 10 kohm
@--|<---@        |  | MCLR     |     | |
|       |        |  | ----     | 11  -|-                       ______
|       |        |  |    (data)|_13__/-\_T2_________\\_____@__|_CTS__>
|       |        |  |          | 17 BC548                 _|_
|       |        |  |          |                          | |1,5 kohm
|    T1 /        |  |          |                          |_|  ______
@------|         |  |   (clock)|_12_______                 |__<_DTR__|
| BC548 \        |  |          | 16       |
|       |        |  |          |          |
|       |        |  |___Vss____|          |
|       |        |       | 2,5,6,7,8,9,18 |
|       |        |       |                |
|       |        |       |                |
|       |        |       |         1N4148 |                    ______
|       @__z<____@__@____)______@____|<___@___@_____\\________<_RTS__|
|       | 8,2V      |    |      |             |
|     +___        +___   |      z             -
|       -           -    |     / \5,1V       / \
| 1N4148| 100uF     |22uF|      |       1N4148|
|___|<__@___________@____@______@_____________|

- Mailme si quereis la imagen de este diagrama.

ACLARACIONES:

  |<  --> Diodos
  z<  --> Diodos zener
  @   --> Uniones de las pistas de cobre

CONECTOR DB9
------------

                  TxD DTR  _tierra
           ________|__|___/_
           \1o  o  o  o  o /
            \_o__o___o__o9/
                 |   |
                RTS CTS

CONECTOR DB25
-------------

* Por si las moscas, ademas lo importante es aprender, aprovechar la
   oportunidad que hoy estoy generoso en esquemas e informacion tecnica.

	    / 13------------------------1- \
           /    * * * * * * * * * * * * *   \
           \     * * * * * * * * * * * *    /
            \ --25--------------------14-- /

   (Este es el conector del puerto paralelo un conector DB-25)



            Patilla   Nombre          Nivel    Entrada / Salida
            1          Strobe         0             S
            2          D0             1             S
            3          D1             1             S
            4          D2             1             S
            5          D3             1             S
            6          D4             1             S
            7          D5             1             S
            8          D6             1             S
            9          D7             1             S
            10         Acknowledge    0             E
            11         Busy           1             E
            12         Paper out      1             E
            13         Select         1             E
            14         Autofeed       0             S
            15         Error          0             E
            16         Initialize     0             S
            17         Select Input   0             S
            18         Gnd            /             /



%% INDICACIONES DE FUNCIONAMIENTO
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Para programar el microcontrolador, necesitas una tension de entre 12 V y
14 V, que debes aplicar a la patilla 4 (MCLR). Esta tension se consigue
cargando los dos condensadores electroliticos.

Al utilizar los diodos Zener se obtiene una tension de aproximadamente 13 V
en la patilla 4 y de 5 V en la patilla 14.

La corriente de carga entra por TxD, llega a la base de T1, sale por el
colector(con esta disposicion, la corriente de base sale por el emisor y
el colector), pasa por los condensadores y retorna por RTS.

Los programas se envian al microcontrolador a traves de la linea DTR, y el
microcontrolador los manda al ordenador a traves de CTS. El transistor T2
permite que se realicen ambas operaciones.

Es posible montar el programador anterior en una placa protoboard o en un
soporte permanente (un circuito impreso), puesto que es un circuito que vas a
utilizar con frecuencia para cualquier proyecto que quieras realizar con tu PIC.



@@ EL PRIMER CIRCUITO
@@@@@@@@@@@@@@@@@@@@@

Con objeto de probar el programador recien creado y entender como se desarrolla
una aplicacion mediante microcontrolador, vamos a desarrollar un circuito muy
simple. Se trata de hacer que parpadee un LED.

Para ello, monta el siguiente circuito (a fin de que el circuito funcione,
tienes que programar el microcontrolador 16F84 que hemos utilizado, asunto del
que nos ocuparemos en el sigueinte paso).


                                                          5V
  __@________________@_______@____________________________o
   _|_               |       |
   | | 4,7 kohm    _4|_____14|___
   | |            | ----    Vdd  |
   -|-            | MCLR         |
    |           16|              |      LED 1
    @_____________|entrada       |6      //   _____
    |             |           RBO|------|>>--|_____|---|
    |             |              |           220 ohm   |
   ___            |              |                     |
   ___ 22pF       |    16F84     |                     |
    |             |              |                     |
    |             |              |                     |
   ///            |_____Vss______|                     |
                         |5                            |
                         |                             |
                         |                             |
  _______________________@_____________________________@___


@@ FASES DE PROGRAMACION
@@@@@@@@@@@@@@@@@@@@@@@@

Una vez realizado el programador, hay que conectarlo al ordenador a traves del
puerto serie y colocar el microcontrolador. A continuacion , para grabar el
programa, debes seguir este procedimiento:

|1| EDITAR EL PROGRAMA
----------------------
Si vas a realizar el programa en lenguaje ensamblador, usa un editor de textos
simple (que no introduzca ningun codigo), como Bloc de notas.

Tras guardarlo como Prueba1.txt, sal del Bloc de notas, ve a la carpeta donde
se encuetnre el fichero y cambia el nombre a prueba1.asm.

La extension .asm significa <<assembler>> e indica que es un programa en
lenguaje ensamblador.

El codigo es el siguiente:
______________________________________________
   list p=16f84                               |
   #include p16f84.inc                        |
Tiempo EQU 22h                                |
Vueltas EQU 23h                               |
   org 0 ;origen del programa en memoria      |
                                              |
CONFIGURAR                                    |
   BSF STATUS, RP0 ;iniciamos configuracion   |
   BCF TRISB, 0 ;RBO Salida                   |
   BCF STATUS, RP0 ;fin de la configuracion   |
                                              |
COMIENZO                                      |
   BSF PORTB, 0 ;encender LED                 |
   CALL RETARDO ;ir a retardo                 |
   BCF PORTB, 0 ;apagar LED                   |
   CALL RETARDO                               |
   GOTO COMIENZO ;ir a comienzo               |
                                              |
RETARDO MOVLW b'11001000' ;Vueltas=200        |
        MOVWF Vueltas                         |
MAS     DECFSZ Tiempo ;Tiempo=Tiempo-1        |
        GOTO MAS                              |
        MOVLW b'11111111'                     |
        MOVWF Tiempo                          |
        DECFSZ Vueltas                        |
        GOTO MAS                              |
        RETURN                                |
        END                                   |
______________________________________________|

- Lo que va despues de los ";" no son necesarios puesto que son comentarios.

Si vas a hacer el programa en Basic (lo que es recomendable, pues es mucho
mas sencillo), puedes emplear tambien un editor de textos o el editor que
acompaÏa al compilador Basic. El aspecto del programa es el siguiente:

_______________________________________________________
bucle:   High 0       'Encender el Led conectadoa RB0  |
         Pause 500    'Esperar 500 ms                  |
                                                       |
         Low 0        'Apagar el LED conectado a RB0   |
         Pause 500    'Esperar 500 ms                  |
                                                       |
         GoTo bucle   'Ir a bucle                      |
         End                                           |
_______________________________________________________|

- Lo que va despues de " ' " tambien funciona como comentario.

|2| COMPILAR EL PROGRAMA
------------------------
En este punto tienes que transformar las instrucciones dadas en lenguaje
ensamblador o Basic a ceros y unos, el unico lenguaje que son capaces de
entender los circuitos digitales.

* Si se ha realizado el programa en lenguaje ensamblador, es posible utilizar
  el programa MPASM, que puede obtenerse gratuitamente en www.microchip.com.
  Selecciona las siguientes opciones:

    Source File Name: Direccion del archivo Prueba1.asm
    Radix: Default
    Warning Level: Default
    Hex Output: Default
    Generated Files: Error File y List File
    Macro Expansion: Default
    Processor: 16F84
    Tab Size: 8

A continuacion haz clic sobre el boton Assemble para obtener un fichero
llamado Prueba1.hex, que contiene 0 y 1 que grabaras en el microcontrolador.

Aqui puedes observar el aspecto que tendria el fichero Prueba1.hex mediante
el Bloc de notas:
____________________________________________
:100000008316061083120614082006100820032801 |
:10001000C830A300A20B0A28FF30A200A30B0A28B5 |
:020020000800D6                             |
:00000001FF                                 |
____________________________________________|

Observa que se utiliza el sistema hexadecimal para simplificar la
representacion: como sabes, cada digito hexadecimal equivale a 4 bits.

* Si el programa ha sido realizado en Basic, es necesario un compilador
  de Basic.

   Uno de los mas conocidos y documentados es el compilador PicBasic o su
   version mas avanzada que recibe el nombre de PicBasic Pro. Mediante este
   compilador se obtiene tambien un fichero similar a Prueba1.hex.

|3| GRABAR EN EL MICROCONTROLADOR
---------------------------------
Con objeto de grabar en el microcontrolador el programa Prueba1.hex (no
importa si se ha obtenido partiendo de lenguaje ensamblador o de PicBasic),
se usa un programa llamado IC-Prog (que tambien es gratuito y se puede
descargar desde internet, 'www.ic-prog.com').

En la pantalla inicial hacemos clic sobre Archivo > Abrir archivo y
seleccionamos Prueba1.hex.

Antes de hacer clic sobre el icono Programar todo, que iniciara la descarga
al microcontrolador, hay que seleccionar:

# Ajustes > Opciones > Idioma > EspaÏol

# Ajustes > Dispositivo > Microchip PIC > PIC16F84

# Ajustes > Tipo hardware: JDM Programmer y el puerto
   serie al que esta conectado el programador.

# Oscilador > RC y Bits de configuracion (WDT, PWRT y CP)
   a cero, sin seleccionar.


Despues ya es posible hacer clic sobre Programar todo.

Una vez programado el microcontrolador, se saca del programador y se traslada
al circuito (en nuestro caso el "LED parpadeador"), conectandolo correctamente
prestando especialmente atencion a la colocacion de las patillas.

Al conectar la alimentacion, comenzara a ejecutarse el programa: El LED
parpadeara continuamente.


** Ademas de hacer una programacion completa, IC-Prog tambien permite leer un
** dispositivo programado previamente, borrarlo para realizar otros programas
** o corregir errores y verificar si la programacion se ha realizado bien.
** Para mi esto es realmente algo muy interesante ya que podemos conectar
** microcontroladores de muy diversos aparatos y estudiar los programas que en
** ellos se encuentran e incluso modificarlos.

** Os daria ejemplos, pero me da miedo lo que podria llegar a hacer un
** microondas };.D



============================================================================
£££££££££££££££££££££££ 6.- DATOS TECNICOS £££££££££££££££££££££££££££££££££
============================================================================



@@ INSTRUCCIONES
@@@@@@@@@@@@@@@@

Aqui expongo el grupo de instrucciones especifico de nuestro microcontrolador
"PIC 16F84A":

                        PIC16F84A INSTRUCTION SET

   Operandos Mnemonicos  | Descripcion
   __________________________________________________________________

   BYTE ORIENTED FILE REGISTER OPERATIONS

   ADDWF 	f, d 	   Add W and f
   ANDWF 	f, d 	   AND W with f
   CLRF 	f 	   Clear f
   CLRW         !          Clear W
   COMF 	f, d 	   Complement f
   DECF 	f, d 	   Decrement f
   DECFSZ 	f, d 	   Decrement f
   INCF 	f, d 	   Increment f
   INCFSZ 	f, d 	   Increment f, Skip if 0
   IORWF 	f, d 	   Inclusive OR W with f
   MOVF 	f, d 	   Move f
   MOVWF 	f 	   Move W to f
   NOP          !          No Operation
   RLF   	f, d 	   Rotate Left f through Carry
   RRF  	f, d 	   Rotate Right f through Carry
   SUBWF 	f, d 	   Subtract W from f
   SWAPF 	f, d 	   Swap nibbles in f
   XORWF	f, d 	   Exclusive OR W with f

   BIT ORIENTED FILE REGISTER OPERATIONS

   BCF  	f, b	  Bit Clear f
   BSF  	f, b	  Bit Set f
   BTFSC 	f, b	  Bit Test f, Skip if Clear
   BTFSS 	f, b	  Bit Test f, Skip if Set

   LITERAL AND CONTROL OPERATIONS

   ADDLW 	k 	  Add literal and W
   ANDLW 	k 	  AND literal with W
   CALL 	k 	  Call subroutine
   CLRWDT       !         Clear Watchdog Timer
   GOTO 	k 	  Go to address
   IORLW 	k 	  Inclusive OR literal with W
   MOVLW 	k 	  Move literal to W
   RETFIE       !         Return from interrupt
   RETLW 	k 	  Return with literal in W
   RETURN       !         Return from Subroutine
   SLEEP        !         Go into standby mode
   SUBLW 	k 	  Subtract W from literal
   XORLW	k 	  Exclusive OR literal with W
   __________________________________________________________________



            Palabras reservadas para programar en MPASM
                       (Macro Pic ASM)
   __________________________________________________________________

   _ _BADRAM       - Identify Unimplemented RAM
   BANKISEL        - Generate Indirect Bank Selecting Code
   BANKSEL         - Generate Bank Selecting Code
   CBLOCK          - Define a Block of Constants
   CODE            - Begin an Object File Code Section

   _ _CONFIG       - Set Processor Configuration Bits
   CONSTANT        - Declare Symbol Constant
   DA              - Store Strings in Program Memory
   DATA            - Create Numeric and Text Data
   DB              - Declare Data of One Byte
   DE              - Declare EEPROM Data Byte
   #DEFINE         - Define a Text Substitution Label
   DT              - Define Table
   DW              - Declare Data of One Word
   ELSE            - Begin Alternative Assembly Block to IF
   END             - End Program Block
   ENDC            - End an Automatic Constant Block
   ENDIF           - End Conditional Assembly Block
   ENDM            - End a Macro Definition
   ENDW            - End a While Loop
   EQU             - Define an Assembler Constant
   ERROR           - Issue an Error Message
   ERRORLEVEL      - Set Message Level
   EXITM           - Exit from a Macro
   EXPAND          - Expand Macro Listing
   EXTERN          - Declare an Externally Defined Label
   FILL            - Specify Memory Fill Value

   GLOBAL          - Export a Label
   IDATA           - Begin an Object File Initialized Data Section
   _ _IDLOCS       - Set Processor ID Locations
   IF              - Begin Conditionally Assembled Code Block
   IFDEF           - Execute If Symbol has Been Defined
   IFNDEF          - Execute If Symbol has not Been Defined
   INCLUDE         - Include Additional Source File
   LIST            - Listing Options
   LOCAL           - Declare Local Macro Variable
   MACRO           - Declare Macro Definition
   _ _MAXRAM       - Define Maximum RAM Location
   MESSG           - Create User Defined Message
   NOEXPAND        - Turn off Macro Expansion
   NOLIST          - Turn off Listing Output
   ORG             - Set Program Origin
   PAGE            - Insert Listing Page Eject
   PAGESEL         - Generate Page Selecting Code
   PROCESSOR       - Set Processor Type
   RADIX           - Specify Default Radix
   RES             - Reserve Memory
   SET             - Define an Assembler Variable
   SPACE           - Insert Blank Listing Lines

   SUBTITLE        - Specify Program Subtitle
   TITLE           - Specify Program Title
   UDATA           - Begin an Object File Uninitialized Data Section
   UDATA_ACS       - Begin an Object File Access Uninitialized Data Section
   UDATA_OVR       - Begin an Object File Overlayed Uninitialized Data Section
   UDATA_SHR       - Begin an Object File Shared Uninitialized Data Section

   #UNDEFINE       - Delete a Substitution Label
   VARIABLE        - Declare Symbol Variable
   WHILE           - Perform Loop While Condition is True
   __________________________________________________________________


@@ FUSES
@@@@@@@@

Los fuses son unas variables que configuran ciertos aspectos de nuestro
microcontrolador. En el PIC 16F84A existen 4, a continuacion se explica
cada una.

1- OSC -> Tido de oscilacion ("tipo de reloj")

        * XT: Suministrado mediante un cristal de cuarzo de una frecuencia
              especifica.

        * RC: Oscilador indicado por una resistencia junto a un condensador.

        * HS: Como el primero pero para programas de alta velocidad.

        * LP: (Low Power) Lo mismo, pero la frecuencia no pasa de 200Khz.

2- WDT -> Este fuse le permite al PIC controlar el desarrollo de un bucle
           infinito y asi poder salir del mismo. Al entrar en el bucle y no
           borrarse el Watchdog por un tiempo, se provoca el reseteo del PIC.

3- PWRT -> Se retrase la inicializacion del PIC mientras se estabiliza la
            tension de alimentacion.

4- CP -> (Code Protection) Nadie tiene permiso para leer el codigo del PIC,
          pero sigue siendo posible su sobreescritura y ejecucion.


Si bien recordais estas variables son las que se pueden modificar atraves
del programa IC-Prog, pero si se desconoce por el momento su verdadera
utilidad es mejor no cambiarlos.



============================================================================
£££££££££££££££££££££££ 7.- HISTORIA £££££££££££££££££££££££££££££££££££££££
============================================================================



@@ ALAN TURING Y EL MICROCONTROLADOR
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Te sorprenderia saber la cantidad de aparatos que te rodean que estan
controlados por ordenador: microondas, televisores, mandos a distancia,
videos, camaras digitales, camaras de video, impresoras, lavadoras, telefonos
moviles, el airbag del coche, el sistema antibloqueo de frenos, las alarmas,
etc. Todos esos dispositivos incorporan un circuito integrado llamado
microcontrolador, en cuyo interior hay un microprocesador y unidades de entrada
y salida.

Los microcontroladores suponen la conjuncion perfecta entre informatica y
electronica. Un ordenador concentrado en un pequeÏo circuito integrado que
puede comunicarse con el exterior, almacenar datos y ejecutar distintos
programas.

Los microcontroladores suponen la realizacion practica de los estudios
efectuados tiempo atras por Alan Turing, y que fueron claves tambien para
el desarrollo de los ordenadores. Durante sus aÏos de colegio e instituto,
este matematico no destaco especialmente. Alrededor de 1945, sin embargo,
concibio la idea de un ordenador con memoria que llevara a cabo operaciones
aritmeticas y distintas tareas mediante programas, sin necesidad de otros
componentes electronicos, Desde 1966, lleva su nombre uno de los premios
tecnologicos mas importante, concedido por la Association for Computing
Machinery.


@@ DOMOTICA
@@@@@@@@@@@

La domotica es la rama de la tecnologia que aplica los conocimientos de
automatizacion y control para mejorar la vida en los domicilios particulares
y en los edificios en general. Su objetivo es la construccion de viviendas
inteligentes. Abarca cuatro campos fundamentales: la comodidad, la seguridad,
el ahorro energetico y las comunicaciones. En las casas inteligentes, las luces
se encienden y se apagan al entrar y salir de las habitaciones sin necesidad de
interruptores, la concina electrica se desconecta cuando la comida esta
preparada,y el frigorifico se encarga de ordenar los pedidos de la compra en
incluso de sugerir el menu en funcion de los alimentos que contenga; es posible
activar la calefaccion o dar la orden por telefono de preparar un baÏo cierto
tiempo antes de llegar a casa; si decidimos ver una pelicula, basta con
accionar el mando unico que controla toda la casa para que automaticamente, se
bajen las persianas, se apaguen las luces y se activen el DVD y el televisor.

En el campo de la seguridad, las casas inteligentes controlan las instalaciones
electrica, de agua y de gas, avisando de cualquier anomalia. Tambien velan por
la seguridad de las personas mayores, enfermos y niÏos, y permiten observarlos
en cualquier momento a traves de camaras web. Si detectan la presencia de algun
intruso, bloquean todas las salidas y avisan a la policia.


%% CURIOSIDAD...
%%%%%%%%%%%%%%%%

Existe un sofisticado cubierto que nos indica la temperatura de los alimentos
con solo pinchar en ellos. Se trata del tenedor inteligente. Ademas, este
curioso artilugio se puede dejar clavado en el entrecot, el filete, etc, para
no tener que estar pendiente de la sarten. Mediante radiofrecuencia, el tenedor
inteligente nos comunica si la carne esta cruda, en su punto o bien hecha, en
cualquier lugar de la casa en el que nos encontremos.



============================================================================
£££££££££££££££££££££££ 8.- DESPEDIDA ££££££££££££££££££££££££££££££££££££££
============================================================================


@@ FUENTES DE INFORMACION
@@@@@@@@@@@@@@@@@@@@@@@@@

- Tecnologia Secundaria Oxford Educacion
- Introduccion a los PICs by Ykappz
- www.crocodile-clips.com
- www.microchip.com
- www.ic-prog.com
- 7a69-14 Art. 9

Si quereis tener informacion para programar este mismo controlador en Linux
os remito al articulo publicado en la e-zine 7a69 numero 14, articulo 9. Es
peque¤o y tecnico pero tiene aspectos de lectura recomendable.

Bueno chic@s otro articulo mas para la coleccion, este tema es muy pero que
muy interesante yo seguire estudiando por mi cuenta y realizando muchisimas
mas pruebas, vosotros?, el poder esta en vuestras manos, eso lo sabemos 
todos.

Si quereis encontrarme ya sabeis donde. Para cualquier duda, sugerencia,
opinion o insulto que merezca la pena ser publicado: 
blackngel_hack@hotmail.com

                                                             by blackngel


*EOF*