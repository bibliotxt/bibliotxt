Analisis de virus

Por Fernando Bonsembiante

[Copete]

Analizamos un virus b£lgaro muy especial. No se
diferencia de los demas por usar t‚cnicas muy
sofisticadas ni es demasiado complejo, pero utiliza un
par de t‚cnicas que pueden dejar a un antivirus gen‚rico
muy mal parado.

[End_Copete]


El problema de los virus suele ser el decidir el lugar en
donde ocultarse, tanto en memoria como en el disco.
Algunos, que infectan archivos, lo solucionan mediante el
simple procedimiento de no ocultarse, quedando como
residentes en memoria y agregando su c¢digo al programa
infectado. Otros toman acciones m s complejas, como
buscar  reas de memoria que puedan usurpar al DOS, por
ejemplo, el 512 se mete en un buffer de disco.
Para ocultarse en los archivos, las tecnicas utilizadas
pueden ser, por ejemplo la stealth, que hace a los virus
completamente invisibles cuando est n en memoria. El
problema de los stealth es que cuando no est n activos en
memoria se nota en seguida que algo raro pasa en el
disco, porque los archivos tienen errores, faltan cosas,
o hay clusters cruzados cuando se hace un chkdsk. Por
otro lado, la infecci¢n de un archivo puede detectarse
f cilmente con un chequeador de integridad, y si el
ejecutable fue modificado, de alguna forma podemos
detectar el cambio con un programa y notar que hubo algo
raro. La forma que tiene el Darth Vader de evitar todo
esto es lo que lo diferencia de los dem s virus.

Un virus distinto

Este virus fue escrito en Bulgaria, en la ciudad de
Sof¡a, por Waleri Todorov (no confundir con Todor
Todorov, sysop del Virus eXchange BBS), a principios de
1991. Como ya explic¢ Vesselin Bontchev en su art¡culo
(ver Virus Report 5), lo hizo para probar una nueva idea,
y para acceder al BBS de intercambio de virus. Como lo
hizo espec¡ficamente para este BBS, dej¢ a disposici¢n de
quien lo quisiera el c¢digo fuente del mismo. Este
empieza con un cartel indicando qui‚n es el autor y c¢mo
funciona el virus. Seg£n este mensaje, el mismo fue
escrito en CICTT-Sofia. CICTT significa "Central
Institute for Computer Technic and Technology". Est 
escrito para Tasmb, un assembler integrado con editor y
linker que se usa mucho en Bulgaria para la creaci¢n de
virus, porque requiere de muy poca memoria o espacio en
disco para funcionar. Por esto mismo, el c¢digo es
imposible de compilar con un assembler normal sin hacerle
bastantes modificaciones. Para nombrar algunos de las
diferencias de este lenguaje, basta con mostrar el
principio del c¢digo del virus seg£n su fuente original:

  org     0       ; Comenzar en offset 0

  nop             ; NOPs in£tiles. No sacarlos.
  nop
  nop

  call    NextLine        ; Llamar a la siguiente
instrucci¢n

NextLine

  pop     bx              ; Para calcular su propia
direcci¢n
  sub     bx,6            ; Direcci¢n guardada en BX

Es claro que esto es incompilable con cualquier
assembler, ya que empieza en el offset 0 (para hacer un
.COM, como es el caso de este virus, hay que empezar con
offset 100h). Los labels, como por ejemplo NextLine, no
terminan con el car cter ':', y hay varias
incompatibilidades m s que hacen dif¡cil ensamblarlo con
otro compilador que no sea Tasmb. Para poder estudiar
este virus a partir de su fuente hubo que modificarlo,
con lo cual conseguimos un virus funcionalmente id‚ntico
pero con algunas diferencias m¡nimas en el programa
ejecutable. Estas se deben a la diferencia con el c¢digo
que genera el Tasmb con el que genera el Tasm de Borland
que usamos para estudiarlo. De todas formas, estas
diferencias no influyen en nada en su funcionalidad ni en
el largo del archivo.

El virus no es destructivo en ninguna forma, y solamente
puede causar algun problema en algunas versiones del DOS
y afectar algunos de los archivos infectados en formas
extra¤as si es que usan el  rea en la cual se mete el
virus para variables inicializadas. Lo mas interesante
del virus es que busca  reas de memoria del DOS o de un
archivo que contengan los suficientes ceros como para
ocultarse dentro de ellas. Infecta s¢lo a los archivos
.COM que contengan m s de 255 ceros consecutivos como
para contenerlo. Supone que esos ceros son simplemente
espacio de variables no inicializadas y que no va a a
afectar el funcionamiento del programa meti‚ndose en ese
lugar.
Para ocultase en memoria busca el segmento que ocupa el
DOS y tambien busca una zona de 255 ceros consecutivos
para copiarse all¡. De esta forma, no aparece en ning£n
listado de memoria hecho con ningun programa. Simplemente
utiliza una parte libre de la memoria correspondiente al
DOS. Para infectar archivos, tambien utiliza una t‚cnica
especial. No modifica ningun archivo en el disco, lo que
ser¡a f cilmente detectable si usamos un verificador de
integridad. Lo que hace es esperar que el DOS vaya a
grabar en el disco un archivo .COM para agregarle al
buffer de memoria el virus si encuentra un espacio de
ceros lo suficientemente grande. Por esto, modifica
solamente la memoria y no los archivos en el disco. Como
no toca los ejecutables del disco, un verificador de
integridad no notar¡a nada raro, y no detectar¡a el
virus. Cuando se copia un ejecutable, el verificador de
integridad reci‚n en ese momento crea los datos
necesarios como para calcular su integridad en el futuro
y considera que est  sano. Ya que el virus ni siquiera
modifica la longitud del archivo, no es f cil detectar la
infecci¢n. Por eso nunca hay que confiar en un solo tipo
de protecci¢n antivirus, ya que siempre hay una forma de
enga¤arla. Tambien este m‚todo de copiado, hay que
reconocerlo, no es demasiado efectivo, y es algo lento,
aunque no es imposible pensar en m‚todos m s efectivos. A
esta t‚cnica se le dio el nombre de Slow Infection, o
infecci¢n lenta, y se puede considerar a la par de otras
como stealth en peligrosidad.
Para dar una idea de lo peligrosa que puede ser esta
t‚cnica, Vesselin Bontchev, en un art¡culo aparecido en
Virus News International del mes de Junio de 1993,
imagina un virus extremadamente dif¡cil de detectar
usando t‚cnicas convencionales de detecci¢n por
comportamiento o por comprobadores de integridad. Este
virus imaginario, llamado Kuang (por el virus 'lento'
descripto por William Gibson en su novela Neuromante),
combina las t‚cnicas de stealth con las de slow infector,
m s algunas otras, para que sea extremadamente dif¡cil de
detectar.

Funcionamiento

Darth Vader empieza con tres instrucciones NOP, que no
hacen nada. Luego de eso, hace un CALL a la siguiente
instrucci¢n, para que en el stack aparezca la direcci¢n
de retorno. Esa direcci¢n de retorno menos 6 es el offset
del virus dentro del segmento. Esto es necesario, ya que
como el virus se copia a los espacios de ceros dentro de
los ejecutables, nunca va a estar en el mismo lugar del
archivo, por lo tanto usa ese m‚todo para calcularlo. Ese
CALL no retorna nunca, porque saca la direcci¢n de
retorno del stack y con eso anula el efecto de la
instrucci¢n. Lo siguiente que hace es guardar el valor de
AX con que fue llamado el programa hu‚sped para poder
pasarle el control m s tarde con ese valor. Para
ocultarse dentro de la memoria, empieza a buscar un  rea
de ceros lo suficientemente grande dentro del segmento
del DOS. Para esto busca el vector de la interrupci¢n
2Bh. Esta apunta a un IRET, no es usada para nada, y por
lo tanto es muy probable que apunte al segmento del DOS
en memoria. En el segmento al que apunta esta
interrupci¢n empieza a buscar, desde el offset cero, en
los primeros 4096 bytes, el  rea de ceros que necesita.
Para esto, llama a la siguiente subrutina con 1000h (4096
decimal) en CX.

SearchZero:

  xor ax,ax              ; Poner 0 en AX para buscar
                         ; ceros

Again:

  inc di                 ; incrementar el puntero ES:DI
  push cx                ; Guardar CX
  push di                ; Guardar DI
  mov cx,LastByte_offs   ; CX = tama¤o del virus
  repe scasb             ; Buscar hasta que sea igual
  pop di                 ; Restaurar DI
  jcxz FoundPlace        ; Si CX es igual a 0
                         ; entonces ES:DI apunta
                         ; a ceros
  pop cx                 ; Si no, restaurar CX
  loop Again             ; y seguir con el loop
                         ; hasta que CX sea distinto a 0
  stc                    ; Si CX es igual a 0, no
encontr¢
  ret                    ; Encender CF (carry) y volver

FoundPlace:

  pop cx                 ; Restaurar CX
  clc                    ; Apagar CF (ES:DI apunta a
                         ; un  rea de ceros)
  ret                    ; Volver

Esta rutina devuelve un puntero al area de ceros adecuada
en ES:DI, si la encuentra. En caso de no encontrarla,
pone el flag de carry en 1. Si no puede instalarse en
memoria, en el caso de no encontrar espacio libre
suficiente, le pasa el control al programa hu‚sped y no
intenta instalarse. Esta es la £nica comprobaci¢n que
hace de si est  previamente instalado en memoria: supone
que si no encuentra lugar es porque el virus ya est 
instalado. En el caso muy poco probable de que hubiese
lugar para copiarse en memoria dos veces, la segunda vez
que se ejecute un programa infectado quedar¡a residente
duplicado en la memoria.
Una vez que encontr¢ el lugar adecuado, el virus procede
a modificar la interrupci¢n 21h para instalar su rutina
de infecci¢n. Lo que hace es algo muy poco est ndar y muy
interesante. Para entender lo que hace, debemos explicar
como funciona la interrupci¢n 21h, la que maneja casi
todos las funciones del DOS. Para diferenciar entre
funci¢n y funci¢n del DOS, hay que llamar a la
interrupci¢n 21h con distintos valores en el registro AH.
El DOS tiene una tabla interna que apunta a cada rutina
que maneja cada funci¢n, y llama a cada funci¢n con un
CALL indexado seg£n esa tabla. Como el DOS reside todo en
el mismo segmento, esa tabla tiene solamente el offset
dentro de ese segmento, o sea, dos bytes por rutina. Todo
esto es cierto para el DOS en sus versiones anteriores a
la 5 y posteriores a la 3. La forma de hacer un CALL
indexado es la siguiente:

  mov bx, cs:[bx+offset_tabla]
  call [bx]

En offset_tabla tenemos el offset en donde empieza la
tabla en el segmento del DOS, y luego el CALL le pasa el
control a la rutina deseada. En BX, antes de ejecutar
estas dos instrucciones, tenemos el n£mero de funci¢n del
DOS multiplicado por dos, ya que cada offset ocupa dos
bytes, y las funciones est n ordenadas por n£mero. Lo que
hace el virus es modificar la tabla para que la funci¢n
40h del DOS, la que se usa para escribir archivos en el
disco, apunte a su propio c¢digo. Como el virus tambien
reside en el segmento del DOS, esto no presenta ning£n
problema. Con este m‚todo, el virus toma control y se
ejecuta cada vez que se copia un archivo sin haber
modificado para nada la tabla de interrupciones, y est 
residente sin que ningun programa pueda detectarlo.
Para encontrar esta tabla, el virus busca ese mov bx,
cs:[bx+offset_tabla], buscando los c¢digos hexadecimales
de esa instrucci¢n: 2E 8B 9F. Los dos bytes siguientes
son el offset de la tabla. Toda esta informaci¢n es muy
dif¡cil de conseguir; nosotros la conseguimos gracias a
la ayuda de Vesselin Bontchev que muy amablemente nos di¢
toda la informaci¢n necesaria como para comprender esta
estructura no documentada del DOS. Esto habla muy bien de
los conocimientos de los programadores b£lgaros de virus
(tambien de los expertos b£lgaros en virus, como
Bontchev), que conocen estos secretos del DOS tan bien.
Lamentablemente estos conocimientos fueron usados, en
este caso, para hacer un virus.
Como vemos, esta forma de tomar la interrupci¢n 21h
funci¢n 40h funciona s¢lo en algunas versiones de DOS. Es
mas, el loop que implementa la busqueda no tiene
condici¢n de salida, as¡ que en el caso de no encontrar
esos tres bytes en todo el segmento el virus quedaria
colgado, colgando la maquina. M s a£n, el m‚todo de
esconderse en los ceros no funciona en DR-DOS porque usa
para otras cosas el  rea de ceros y el virus termina
siendo sobreescrito. En algunas circunstancias, tampoco
anda muy bien bajo algunas versiones de DOS, porque parte
del virus termina siendo sobreescrita. El fuente del
virus aclara que funciona de DOS 2 en adelante, y en
versiones menores que 5.0.
Despues de instalar el handler de la interrupci¢n 21h
funci¢n 40h, el virus se copia a la zona de ceros
elegida, restaura los tres primeros bytes del programa
hu‚sped (los que hab¡a modificado como veremos m s
adelante), y vuelve al programa original que se ejecuta
normalmente, como si no estuviese infectado.

Contagio

El virus en memoria se activa cada vez que se intenta
escribir un archivo en disco. En el momento en que se
llama al handler de la funci¢n 40h del DOS el virus toma
el control y verifica si el archivo que se va a escribir
tiene la extensi¢n .?OM. Este comportamiento puede ser
peligroso, ya que usando este m‚todo puede corromper
archivos cuya extensi¢n termine con OM y no sean .COM.
Para buscar el nombre del archivo, utiliza algunas
funciones no documentadas de la interrupci¢n 2Fh. Si el
archivo no es un .COM, vuelve al handler original del
DOS. Si es .?OM, toma los tres primeros bytes del buffer,
que supone que son los tres primeros bytes del programa,
por donde se empieza a ejecutar un .COM, y los guarda en
un  rea de variables del virus. Luego busca un  rea de
ceros lo suficientemente grande como para ocultarse,
usando la rutina que ya describimos. En el caso de no
encontrarla, vuelve al handler original sin infectar el
archivo. Si hay lugar, se copia al buffer del archivo en
memoria, modifica los tres primeros bytes del buffer para
que apunten al virus, as¡ se ejecuta cuando se carga el
programa, y vuelve al handler original del DOS. Esta
rutina del mismo DOS es la que se encarga de escribir el
virus en el disco, en el archivo modificado por el DOS.
Notaremos que no chequea en ningun momento si el archivo
estaba previamente infectado, por lo que si se copia dos
veces consecutivas un archivo con suficientes ceros como
para contener dos veces al virus, el archivo va a quedar
doblemente infectado. Esto en principio no ser¡a
demasiado problema porque lo m s probable es que no pueda
quedar residente en memoria dos veces.

Conclusi¢n

Como vimos, este virus es muy peque¤o (s¢lo 255 bytes)
pero utiliza una t‚cnica muy novedosa para pasar
inadvertido, y debe servirnos de advertencia contra
quienes pretenden controlar con un programa gen‚rico
todos los virus existentes, ya que este virus es
extremadamente dif¡cil de detectar con m‚todos
convencionales.
