			HOW TO WRITE YOUR OS (I)
			-=-=-=-=-=-=-=-=-=-=

[ autora:imoen ]

Hola chicos bien venidos al primer tutorial sobre como programar
un SO, primero decir que esta basado en un sistema operativo llamado
josh y que todo el codigo usado esta sacado de alli , abajo esta la 
pagina que por cierto es en ingles.
**********************************************************
trabajo original de  Dr. Mohan Raj Dhanagopal

**********************************************************
Partiendo de eso (que el codigo no es mio) simplemente vamos a ver 
los pasos a seguir para que os introduccais en este mundo en el de la
progrmacion de SO, hay miles de apuntes sobre como deberia ser un SO,
sobre los tipos que hay tal y cual pero, pocos practicos asi que vamos
al tema os parece?. (recordad que el codigo no es mio y por eso los 
comentarios van a ir en ingles para no moficiar el codigo)

Vamos a ir por pasos si os parece, el caso es que cuando enciendes el 
ordenador se sucede una serie de acontecimientos, veamos cuales y por orden:
-> (1)Los registros del procesador se vacian o se ponen en blanco o cero
   (logico eliminando cualquier cosa anterior)
-> (2)Se el segmento de instrucciones se coloca esta direccion de memoria:
   0xFFFF y se ejecuta las instrucciones alli puestas y cuales son???
-> (3)La bios se inicia se ejecuta el post( esto es un test de algunos
    elemnetos hardware los famosos beep aunque las ultimas asus ya te
    hablan y todo XDD) que lujazoo ehh a una cosilla para nuestro sistema
    operativo cuando empezemos a codear lo vamos a poner en disquetes asi
    que aseguraros que en vuestra bios podeis arrancar desde disco y lo
    situais como primera opcion.
-> (4)Despues del post se procede a llamar un programita el cual sera el
   encargado de lanzar ya por fin el sistema operativo(4).

Que tal yo creo que con estos 4 pasos basicos se os debe quedar ya una idea
general bueno hay mucha mas info en internet sobre esto, pero con lo que os
he contado yo creo que nos vale y nos sobra XDDD, asi que me centro en el
punto 4 y preparados porque empieza nuestra aventura:

Bueno dicho programa se situa en el primer sector del disco (duro o disquete
en nuestro caso disquete por ahora) tambien llamado o conocido como sector
de arranque (esto ya os suena ehh) el tamaño de dicho sector y por
consiguiente de dicho programa sera de un maximo de 512 bytes y importante el
valor de los dos ultimos bytes del deben contener el siguiente valor  0xAA55,
valor conocido como boot signature que indica que el disquete o disco es
iniciable, sin ese valor o con otro distinto, lo que hace la bios es buscar
otra unidad iniciable.

Venga sigamos, depues del post y antes de cargar el bot loader es decir el
programa encargado de lanzar el SO, hechemos un vistazo a la memoria, lo que
quiero decir es que vamos a ver que datos hay en memoria en ese momento:
(notacion hexadecimal)

(1)Desde 0x0000 hasta 0x0040 (es decir 1kb de tamaño) contiene una lista de
direcciones llamada "interrupt service routine vector" ni puta idea de como
traducir esto asi que lo llamaremos a partir de ahora servicio de
interrupciones, trankilo mas adelante os cuento lo que es por ahora nos
quedamos con su direccion y que salvo q sepas lo que estas haciendo no
toques este area de memoria.

(2)Desde 0x0040 Hasta 0x0100 actualmente es un poco mas grande pero bueno
razones de seguridad y sencillez lo dejamos asi, esta zona se llama bios data
area, no hace falta traduccion verdad? en este area la bios guarda los datos
sobre la memoria sobre los dispositivos conectados.... en fin como antes
salvo que sepas lo que haces no lo tokes.

(3)Desde 0x0100 hasta 0x07C0 esta vacia (por fin algo libre joder XDDDD) y
esta libre para ser usada por nuestro SO y sus aplicaciones (llegaremos a
tanto ?)

(4)Desde block 0x07C0 hasta 0x07E0 es donde el bot-loader se carga por la
bios, y no debemos tocar este area salvo que???
(lector>, salvo que el sistema operativo ya este cargado entonces ya podemos
usarla),imoen muy biennnn veo que estais atentos ........

(5) Desde 0x7CE0 hasta 0xA000 esta libre y disponible para el SO y sus
aplicaciones, juraria haber escrito esto antes?

(6)Desde 0xA000 hasta 0xC000 esta dedicada a la memoria de video, no tocaremos
este area de meoria salvo que queramos escribir o dibujar algo directamente
en la pantalla saltandonos las rutinas de la BIOS. Si algun programador 
grafico lee esto ya sabra que este metodo es mas rapido que las rutinas bios

(7)Desde 0xC000 hasta 0xF000 esta ocupada por la Rom bios asi que en condiciones
normales no deberemos escribir en esa zona de memoria

(8)Desde 0xF000 HAsta  0xFFFF  se encuentra la Base de la memoria Bios, por ejemplo
la primera instrucion de este bloque es la que reinicia el PC

Asi es como esta la memoria durantel el proceso de carga, es decir justo despues
del post y antes de cargar cualquier sistema operativo, creo que ha sido interesante 
hacer un dibujo de la memoria antes de continuar para que lo entendais todo mejor.
Nosotros vamos a cargar nuestro sistema operativo en 0x0100, justo despues
de los datos de la bios.

Continuamos en informaica el reinvertar algo que ya es existe se considera 
una perdida de tiempo, ademas hay muchos recursos gratis y disponibles pero 
lo que aki tratamos es de  que pqrendas asi que lo siguiente que vamos a 
hacer es programar el cargados del sistema operativoque perfectamente podria
ser otro tio lilo o grub o el que mas te guste.

Nuestro cargador va a lanzar nuestro sistema operativo desde los sectores del disquete
hasta la ram y despues lo ejecutara, tendremos que tener un especial cuidado  con el 
tamaño de nuestro sistema operativopara cargar el numero correcto de sectores desde el 
disco hasta la ram, por eso tambien asegurate q tu disco no tiene sectores defectuosos 
me refiero a tu disquete :P
Bueno mas cosillas antes de codear vamos a hacer que nuestro cargador y asi de paso 
nos quitamos los problemas de antes puede entender FAT12  y cargarlo en memoria, puse 
nada el tio que ya ha inventado esto se llama matthew vea y  vamos a usar su mismo 
cargador para pasar rapidamente a programar nuestro sistema operativo asi que ves a su web 
y descarga el codigo o pillalo de nuestra ezine en el apartado de codigos (os) 
(http://www.geocities.com/mvea/bootstrap.htm) 
La mayor parte del codigo se concentra en leer la fat y cargarla en memoria hechale un 
vistazo al  codigo es basntante facil de entender, si sabes un poquito de ensambaldor 
pues mejor.
El codigo del boot loader va dentro del fichero os.zip y se llama boot.bin, esta listo para
que lo carges con el debug segun los consejos que te he dado)

Una vez conseguido nuestro cargador del sistema tendremos que compilarlo y ponerlo en un 
disquete pra comprobar que churula asi que veamos los pasos:

1->Necesitas el nasmw asi que consiguelo de la web oficial o de www.imoenlabs.cjb.net 
instalalo por cierto esta sera nuestra herramienta de trabajo puesto que todo sera ensamblador
2->Copial el boot.asm que has conseguido de internet o de la propia  ezine en la seccion 
de codigo   y despues teclea esto para compilarlo:
nasmw boot.asm-o boot.bin -f bin
3->carga el boot.bin en el sector de arranque de tu disquete para ello vamos a usar 
una herramienta muy popular que se llama debug y que todos deberias de tener 

C:\NASM>Debug boot.bin
-W 100 0 0 1
-Q
C:\>
con eso grabamos el boot.bin en el sector de arranke way nuestro disquete ya es capaz 
de arrankar solitoy que ararnka nada por ahora. Por si usas linux puedes cargar el boot.bin 
en el sector de arranke asi :
dd if=boot.bin bs=512 count=1 of=/dev/fd0
Recuerda que siempre hablo del disquete


Ya tenemos nuestro cargador de sistema y ahora pasemos a escribir el kernel del sistema
queremos que se carge algo verdad?
Primero que es un kernel? pues es el nucleo de cualquier sistema operativo
y se encarga de la mayoria del trabajo ademas de proporcionar a las aplicaciones
un buen conjunto de funcionalidades, guardar escribir y esas cosas.
El kernel normalmente nunca se descarga de la memoria, y generalmente las aplicaciones 
hablan con el kernel a traves de algun interface o algo similar es decir 
que hay comunicacion entre ellas.

Hay muchas formas de hacer un kernel preguntarle a linus tolvars XDD, digamos que
podeos hacerlo en modo real en modo protegido,multitarea modo vm86 y esas cosas
nuestro kernel sera lo mas sencillo posible y por supuesto sera en modo real y monotarea
lo mas facil de programar mas que nada porque de las otras formas no tengo ni idea 
alguien podria ayudarnos verdad? en un esfruezo quiza controlemso interrupciones 
pero sera mas adelante que os veo ansiosos por codear.

Pues ale abre el bock de notas
nuestra herarmienta de programacion el nasm usa tres segmentos :
.text para el codigo
.data para inicializar los datos
.bss para datos no inicializados
mas cosas nuestro programa empieza en la primera linea y de algun aforma hay que decirlo al 
compilador mediante  org 0x0000

y aki tenemos el esqueleto de nuestro kernel:
;********************* kernel (nucleo)***********
[org 0x0000]
[bits 16]

[SEGMENT .text]

[SEGMENT .data]

[SEGMENT .bss]

;*********************kernel(nucleo) *************
si way pero esto esta vacio ?  bueno es para que tengais una idea de lo que biene ahora.
Lo priemro sera codear una funcion que muestre en pantalla mensajitos
pues nada esto:

[SEGMENT .text]
_disp_str:	    ; nombre de la funcion puede ser perico palotes
    lodsb           ; load next character
    or  al, al      ; test for NUL character
    jz  .DONE
    mov ah, 0x0E    ; BIOS teletype
    mov bh, 0x00    ; display page 0
    mov bl, 0x07    ; text attribute
    int 0x10        ; invoke BIOS
    jmp _disp_str
.DONE:
    ret
Lo que se hace es lodsb carga el caracter de la memoria comparamos que no sea
nulo con or al,al si es nulo ya hemos acabado la palabra o la frase y con el resto llamamos 
a las  funciones bios para escribir.

la cosntante a mostrar es :
[SEGMENT .data]
    strWelcomeMsg   db  "Welcome to OS!", 0x00 ; el 0x00 es el caracter de nulo o fin de cadena

dijimos que el kjernel se tenia que colocar en una posicion de memoria especial 
pues para decirselo:

[SEGMENT .text]
    mov ax, 0x0100      ;location where kernel is loaded
    mov ds, ax
    mov es, ax
    
    cli
    mov ss, ax          ;stack segment
    mov sp, 0xFFFF      ;stack pointer at 64k limit
    sti

_disp_str:
    ...

y ya para concluir es decir mostramos el mensaje hacemos una pausa y reiniciamos el sistema
...
    call _disp_str

    mov ah, 0x00
    int 0x16            ; await keypress using BIOS
    int 0x19            ; reboot
    ...


Ya esta solo nos falta compilar meter en el disco en que teniamos nuestro cargador 
y obtendremos un bonito sistema operativo que nos dira hola y se reiniciara
Bueno si juntas todo el codigo  te quedara algo asi: 

;*****************start of the kernel code***************
[org 0x0000]
[bits 16]

[SEGMENT .text]
    mov ax, 0x0100                          ;location where kernel is loaded
    mov ds, ax
    mov es, ax
    
    cli
    mov ss, ax                              ;stack segment
    mov sp, 0xFFFF                          ;stack pointer at 64k limit
    sti
    
    mov si, strWelcomeMsg                   ;load message
    call    _disp_str
    
    mov ah, 0x00
    int 0x16                                ; await keypress using BIOS service
    int 0x19                                ; reboot
    
_disp_str:
    lodsb                                   ; load next character
    or  al, al                              ; test for NUL character
    jz  .DONE
    mov ah, 0x0E                            ; BIOS teletype
    mov bh, 0x00                            ; display page 0
    mov bl, 0x07                            ; text attribute
    int 0x10                                ; invoke BIOS
    jmp _disp_str
.DONE:
    ret
    
[SEGMENT .data]
    strWelcomeMsg   db  "Welcome to JOSH!", 0x00

[SEGMENT .bss]

;********************end of the kernel code********************
(este codigo estan dentro de os.zip y es kernel0.01.asm)

todo esto lo metes en un fichero kernel.asm y lo compilas asi :
nasmw kernel.asm -o kernel.bin -f bin
despues lo copias al disquete y listo  ya tienes tu sistema operativo creado XDDD
Espero que lo pruebes puesto que es muy divertido, te hago un resumen, compilas el 
sector de arranke lo copias con debug al disco y despues coges este codigo lo compilas tambien 
y lo copias al disquete y listo lo pones reinicas tu pc y ya tienes tu OS XDDD




