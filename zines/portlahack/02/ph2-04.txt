[::............................o( cRACK )o............................::]

1. Manual del cracking [1/2]
INDICE
------

Entrega #1 0. NOTA DEL AUTOR.
           1. GUIA DE ENSAMBLADOR (ASM) ENFOCADA AL CRACKING.
Entrega #2 2. CONFIGURACION Y USO DE SOFTICE.
           3. NUESTRO PRIMER CRACKING.

 --------------------
| 0. NOTA DEL AUTOR. |
 -------------------- -------------------------------------------------------
 Hiz, soy Antikton y voy a intentar explicaros como se crackea; pero antes
 voy a dejar unos puntos claros:

    1.- Si no tienes ni puta idea de lo que es crackear, mejor que dejes de
    leer este fichero y lo borres.

    2.- Si sabes lo que es pero no tienes ni puta idea de programacion (lo
    que se dice nada de nada) y crees que vas a poder estar crackeando
    programas comerciales en unos minutos, gilipollas!!! tu te crees que esto
    es coser y cantar???

    3.- Perdonad si me equivoco al escribir o solo pongo los signos al final
    (como los ingleses) pero es la economizacion del lenguaje.

    4.- Si tienes unos poquillos conocimientos de programacion y te gustaria
    crackear, te felicito porque has dado con el manual adecuado (digo yo)
    pero necesitaras dos o tres meses para empezar a crackear tu solito :)

    5.- NOTA: Este documento con la informacion que en el aparece, es solo
    para uso de aprendizaje. El autor no se hace responsable de lo que la
    gente haga con ello. ;)

    6.- Bueno, comenzemos a crackear X)

    El articulo esta  enfocado  en  crackear programas para Windows 95/98 de
    esos que piden un password o que piden un nombre y un codigo ( o sea, la
    mayoria :)

 -------------------------------------------
| 1. GUIA DE ASEMBLER ENFOCADA AL CRACKING. |
 ------------------------------------------- --------------------------------
Antes de nada, si no sabes lo que es ASM o lo que es un Looping o un
FOR...NEXT, etc. te recomiendo que dejes de leer este manual ya que no tienes
el nivel suficente para leerlo :P

REGISTROS (Registers)
---------------------
Los registros son basicamente sitios por defecto en donde se guardan datos.
Los unicos por los que os teneis que preocupar son: (E)AX, (E)BX, (E)CX y
(E)DX.  (La (E) solo es para cuando se debuguea en codigo de 32 bit)
Tambien estan los registros de parejas:
    DS:SI  ;  pueden ser usados como fuente (origen) para operaciones de
    cadenas.
    ES:DI  ;  usado como el destino para las operaciones de cadenas.

Entender los registros no es muy importante para crackear, pero lo que si
tienes que saber es que son variables para el almacenamiento de datos :)

FLAGS
-----
Los Flags son esencialmente como los registros excepto que los Flags solo
pueden contener valores especificos, como verdadero o falso (1 o 0), etc.
Los flags son calculados por comandos como CMP y son usados para comprobar
el resultado de una llamada (CALL), por ejemplo:
    CMP AX,BX            ; compara AX con BX, si son iguales el Flag 0 cambia
    JZ  00124531         ; si el flag 0 ha cambiado, salta a 00124531, si no
                           continua

LA PILA (STACK) Y LOS PUSH AND POP (PONER Y QUITAR)
---------------------------------------------------
Antes de cualquier funcion de llamada (a partir de ahora CALL), un programa
debe PONER (a partir de ahora de diremos PUSH) unos parametros que la funcion
espera encontrar en la pila (tecnicamente llamado Stack). Los datos se colocan
de una manera especial. Piensa lo siguiente. Piensalo como si fuera una "pila"
(stack) de platos, el primer plato que ponemos (al hacer un monton) se queda
abajo y sera el ultimo en coger; y el ultimo en poner (el de arriba), es el
primero en coger.
Recuerda esto cuando estes sobre una CALL, los parametros son cogidos en orden
inverso. Te pongo un ejemplo para que te quede claro:
    La funcion API de Windows GetDlgItemTextA requiere los siguientes
    parametros:
        (1) Manejo de la ventana de dialogo (Handle Dialgo Box)
        (2) Identificador del Control
        (3) Direccion del Buffer del Texto
        (4) Tama¤o maximo de la cadena
    Por tanto, esto puede ser pasado de este modo (de forma inversa, para
    luego cogerlo ordenadamente):
        MOV  EDI,[ESP+00000220]       ; Coge en EDI el Handle Dialog Box
        PUSH 00000100                 ; PUSH (4) - Tama¤o maximo de la cadena
        PUSH 00406130                 ; PUSH (3) - Direccion buffer de texto
        PUSH 00000405                 ; PUSH (2) - Identificador de Control
        PUSH EDI                      ; PUSH (1) - Handle Dialog Box
        CALL GetWindowText            ; Llama (CALL) a la funcion GetWin...

Facil, no? esto sera importantea la hora de crackear aplicaciones que piden
numeros de serie.
Si conocemos la direccion del buffer para nuestro numero de serie (es decir,
donde se encuentra almacenado el numero que le hemos metido en la memoria),
en este caso 00406130, solo hay que hacer un breakpoint y normalmente
terminaremos alrededor del procedimiento que genera el numero de serie bueno.

POP se usa para borrar el primer "plato" de la pila. Normalmente, despues de
hacer uns PUSH y haber una llamada, se colocan varios POP para borrar los
datos innecesarios.

AND
---
 - Uso: AND dest, orig
 - Fin: Lleva a cabo una operacion de tipo AND de las dos entradas,
        reemplazando el dest con el resultado.
 - Ejemplo: AND BX, 03h
    No hay mucho que decir. Esto es importante para cuando necesitemos hacer
    un generador de numeros de serie para un programa :)

CALL (Llamada)
--------------
 - Uso: CALL address (direccion)
 - Fin: Ejecuta una funcion en la direccion "address"
 - Ejemplo: CALL 10284312
    Una vez que la funcion termine, el codigo continua en la linea siguiente
    de CALL (es como un GOSUB)

CMP
---
 - Uso: CMP dest, orig
 - Fin: Resta el orig del dest y actualiza en Flag
 - Ejemplo: CMP AX, 03h
    Esta instruccion es muy importante para nosotros (los crackers) :)
    Esta colocado muchas veces en el programa para verificar algo; por ejemplo
    que el numero de serie que introducimos es el mismo que el que tiene el
    programa o genera ;)

INT (Interrupcion)
------------------
 - Uso: INT interrupcion
 - Fin: Llama a una funcion general (normalmente de la BIOS)
 - Ejemplo: INT 10h
    Esta funcion es muy comun en programas de DOS, pero no lo veremos mucho
    ya que me voy a dedicar (como he dicho antes) al Cracking en W95.
    Normalmente los parametros son guardados en los registros por defecto (AX,
    BX, CX, ...)

JMP (Salto)
-----------
 - Uso: JMP direccion
 - Fin: Equivale a un GOTO. Salta a la seccion de codigo de la direccion.
 - Ejemplo: JMP 00402011
    JMP es un salto incondicional. Tan simple como un GOTO :)
    Hay muchas variantes. Las mas importantes son:
        JZ  o JE   - Salta si el Flag 0 es cambiado
        JNZ o JNE  - Salta si el Falg 0 no es modificado
    Normalmente estan despues de uns intruccion de CMP, por ejemplo:
        CMP numseriebueno, numseriemalo   ; compara los num. de serie
        JNE fueradeaki                    ; si no son iguales, salta a otra
                                            parte del codigo

MOV (Mover)
-----------
 - Uso: MOV dest, orig
 - Fin: Copia el byte o el valor de la palabra desde el orig al dest
 - Ejemplo: MOV AX, DX
    Lo veras muy a menudo cuando estes stepping (ejecutando linea por linea.
    una cosa, a lo mejor me confundo y lo llamo stepting o steping, pero me
    refiero a esto, pa cuando lo veais).
    MOV es como si fuera   LET dest=orig
    Hay algunas variantes como MOVSX, pero es raro.

RET (Retorno)
-------------
 - Uso: RET
 - Fin: Para volver de una funcion (Como si fuera RETURN)
 - Ejemplo: RET
    Normalmente lo veras el final de una funcion, y solo dice que vuelva a
    la direccion de la llamada (CALL) para continuar.

LEA (Como LET)
--------------
 - Uso: LEA dest, orig
 - Fin: Hace que el dest sea igual que el orig
 - Ejemplo: LEA EAX, [EBP-34]
    Hace que EAX=EBP-34, facil, no?

Bueno... hasta aca fue la primera parte de este curso que a todos nos
interesa... gracias a Antikton, espera la 2 entrega y final de la mano 
de la PortalHack Zine, todos los meses!!
---------------------------------------------------------[ph2-04.txt]--